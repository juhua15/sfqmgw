{"ast":null,"code":"/**\n * Swiper 3.4.2\n * Most modern mobile touch slider and framework with hardware accelerated transitions\n * \n * http://www.idangero.us/swiper/\n * \n * Copyright 2017, Vladimir Kharlampidi\n * The iDangero.us\n * http://www.idangero.us/\n * \n * Licensed under MIT\n * \n * Released on: March 10, 2017\n */\n(function () {\n  'use strict';\n\n  var $;\n  /*===========================\n  Swiper\n  ===========================*/\n\n  var Swiper = function (container, params) {\n    if (!(this instanceof Swiper)) return new Swiper(container, params);\n    var defaults = {\n      direction: 'horizontal',\n      touchEventsTarget: 'container',\n      initialSlide: 0,\n      speed: 300,\n      // autoplay\n      autoplay: false,\n      autoplayDisableOnInteraction: true,\n      autoplayStopOnLast: false,\n      // To support iOS's swipe-to-go-back gesture (when being used in-app, with UIWebView).\n      iOSEdgeSwipeDetection: false,\n      iOSEdgeSwipeThreshold: 20,\n      // Free mode\n      freeMode: false,\n      freeModeMomentum: true,\n      freeModeMomentumRatio: 1,\n      freeModeMomentumBounce: true,\n      freeModeMomentumBounceRatio: 1,\n      freeModeMomentumVelocityRatio: 1,\n      freeModeSticky: false,\n      freeModeMinimumVelocity: 0.02,\n      // Autoheight\n      autoHeight: false,\n      // Set wrapper width\n      setWrapperSize: false,\n      // Virtual Translate\n      virtualTranslate: false,\n      // Effects\n      effect: 'slide',\n      // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\n      coverflow: {\n        rotate: 50,\n        stretch: 0,\n        depth: 100,\n        modifier: 1,\n        slideShadows: true\n      },\n      flip: {\n        slideShadows: true,\n        limitRotation: true\n      },\n      cube: {\n        slideShadows: true,\n        shadow: true,\n        shadowOffset: 20,\n        shadowScale: 0.94\n      },\n      fade: {\n        crossFade: false\n      },\n      // Parallax\n      parallax: false,\n      // Zoom\n      zoom: false,\n      zoomMax: 3,\n      zoomMin: 1,\n      zoomToggle: true,\n      // Scrollbar\n      scrollbar: null,\n      scrollbarHide: true,\n      scrollbarDraggable: false,\n      scrollbarSnapOnRelease: false,\n      // Keyboard Mousewheel\n      keyboardControl: false,\n      mousewheelControl: false,\n      mousewheelReleaseOnEdges: false,\n      mousewheelInvert: false,\n      mousewheelForceToAxis: false,\n      mousewheelSensitivity: 1,\n      mousewheelEventsTarged: 'container',\n      // Hash Navigation\n      hashnav: false,\n      hashnavWatchState: false,\n      // History\n      history: false,\n      // Commong Nav State\n      replaceState: false,\n      // Breakpoints\n      breakpoints: undefined,\n      // Slides grid\n      spaceBetween: 0,\n      slidesPerView: 1,\n      slidesPerColumn: 1,\n      slidesPerColumnFill: 'column',\n      slidesPerGroup: 1,\n      centeredSlides: false,\n      slidesOffsetBefore: 0,\n      // in px\n      slidesOffsetAfter: 0,\n      // in px\n      // Round length\n      roundLengths: false,\n      // Touches\n      touchRatio: 1,\n      touchAngle: 45,\n      simulateTouch: true,\n      shortSwipes: true,\n      longSwipes: true,\n      longSwipesRatio: 0.5,\n      longSwipesMs: 300,\n      followFinger: true,\n      onlyExternal: false,\n      threshold: 0,\n      touchMoveStopPropagation: true,\n      touchReleaseOnEdges: false,\n      // Unique Navigation Elements\n      uniqueNavElements: true,\n      // Pagination\n      pagination: null,\n      paginationElement: 'span',\n      paginationClickable: false,\n      paginationHide: false,\n      paginationBulletRender: null,\n      paginationProgressRender: null,\n      paginationFractionRender: null,\n      paginationCustomRender: null,\n      paginationType: 'bullets',\n      // 'bullets' or 'progress' or 'fraction' or 'custom'\n      // Resistance\n      resistance: true,\n      resistanceRatio: 0.85,\n      // Next/prev buttons\n      nextButton: null,\n      prevButton: null,\n      // Progress\n      watchSlidesProgress: false,\n      watchSlidesVisibility: false,\n      // Cursor\n      grabCursor: false,\n      // Clicks\n      preventClicks: true,\n      preventClicksPropagation: true,\n      slideToClickedSlide: false,\n      // Lazy Loading\n      lazyLoading: false,\n      lazyLoadingInPrevNext: false,\n      lazyLoadingInPrevNextAmount: 1,\n      lazyLoadingOnTransitionStart: false,\n      // Images\n      preloadImages: true,\n      updateOnImagesReady: true,\n      // loop\n      loop: false,\n      loopAdditionalSlides: 0,\n      loopedSlides: null,\n      // Control\n      control: undefined,\n      controlInverse: false,\n      controlBy: 'slide',\n      //or 'container'\n      normalizeSlideIndex: true,\n      // Swiping/no swiping\n      allowSwipeToPrev: true,\n      allowSwipeToNext: true,\n      swipeHandler: null,\n      //'.swipe-handler',\n      noSwiping: true,\n      noSwipingClass: 'swiper-no-swiping',\n      // Passive Listeners\n      passiveListeners: true,\n      // NS\n      containerModifierClass: 'swiper-container-',\n      // NEW\n      slideClass: 'swiper-slide',\n      slideActiveClass: 'swiper-slide-active',\n      slideDuplicateActiveClass: 'swiper-slide-duplicate-active',\n      slideVisibleClass: 'swiper-slide-visible',\n      slideDuplicateClass: 'swiper-slide-duplicate',\n      slideNextClass: 'swiper-slide-next',\n      slideDuplicateNextClass: 'swiper-slide-duplicate-next',\n      slidePrevClass: 'swiper-slide-prev',\n      slideDuplicatePrevClass: 'swiper-slide-duplicate-prev',\n      wrapperClass: 'swiper-wrapper',\n      bulletClass: 'swiper-pagination-bullet',\n      bulletActiveClass: 'swiper-pagination-bullet-active',\n      buttonDisabledClass: 'swiper-button-disabled',\n      paginationCurrentClass: 'swiper-pagination-current',\n      paginationTotalClass: 'swiper-pagination-total',\n      paginationHiddenClass: 'swiper-pagination-hidden',\n      paginationProgressbarClass: 'swiper-pagination-progressbar',\n      paginationClickableClass: 'swiper-pagination-clickable',\n      // NEW\n      paginationModifierClass: 'swiper-pagination-',\n      // NEW\n      lazyLoadingClass: 'swiper-lazy',\n      lazyStatusLoadingClass: 'swiper-lazy-loading',\n      lazyStatusLoadedClass: 'swiper-lazy-loaded',\n      lazyPreloaderClass: 'swiper-lazy-preloader',\n      notificationClass: 'swiper-notification',\n      preloaderClass: 'preloader',\n      zoomContainerClass: 'swiper-zoom-container',\n      // Observer\n      observer: false,\n      observeParents: false,\n      // Accessibility\n      a11y: false,\n      prevSlideMessage: 'Previous slide',\n      nextSlideMessage: 'Next slide',\n      firstSlideMessage: 'This is the first slide',\n      lastSlideMessage: 'This is the last slide',\n      paginationBulletMessage: 'Go to slide {{index}}',\n      // Callbacks\n      runCallbacksOnInit: true\n      /*\n      Callbacks:\n      onInit: function (swiper)\n      onDestroy: function (swiper)\n      onBeforeResize: function (swiper)\n      onAfterResize: function (swiper)\n      onClick: function (swiper, e)\n      onTap: function (swiper, e)\n      onDoubleTap: function (swiper, e)\n      onSliderMove: function (swiper, e)\n      onSlideChangeStart: function (swiper)\n      onSlideChangeEnd: function (swiper)\n      onTransitionStart: function (swiper)\n      onTransitionEnd: function (swiper)\n      onImagesReady: function (swiper)\n      onProgress: function (swiper, progress)\n      onTouchStart: function (swiper, e)\n      onTouchMove: function (swiper, e)\n      onTouchMoveOpposite: function (swiper, e)\n      onTouchEnd: function (swiper, e)\n      onReachBeginning: function (swiper)\n      onReachEnd: function (swiper)\n      onSetTransition: function (swiper, duration)\n      onSetTranslate: function (swiper, translate)\n      onAutoplayStart: function (swiper)\n      onAutoplayStop: function (swiper),\n      onLazyImageLoad: function (swiper, slide, image)\n      onLazyImageReady: function (swiper, slide, image)\n      onKeyPress: function (swiper, keyCode)\n      */\n\n    };\n    var initialVirtualTranslate = params && params.virtualTranslate;\n    params = params || {};\n    var originalParams = {};\n\n    for (var param in params) {\n      if (typeof params[param] === 'object' && params[param] !== null && !(params[param].nodeType || params[param] === window || params[param] === document || typeof Dom7 !== 'undefined' && params[param] instanceof Dom7 || typeof jQuery !== 'undefined' && params[param] instanceof jQuery)) {\n        originalParams[param] = {};\n\n        for (var deepParam in params[param]) {\n          originalParams[param][deepParam] = params[param][deepParam];\n        }\n      } else {\n        originalParams[param] = params[param];\n      }\n    }\n\n    for (var def in defaults) {\n      if (typeof params[def] === 'undefined') {\n        params[def] = defaults[def];\n      } else if (typeof params[def] === 'object') {\n        for (var deepDef in defaults[def]) {\n          if (typeof params[def][deepDef] === 'undefined') {\n            params[def][deepDef] = defaults[def][deepDef];\n          }\n        }\n      }\n    } // Swiper\n\n\n    var s = this; // Params\n\n    s.params = params;\n    s.originalParams = originalParams; // Classname\n\n    s.classNames = [];\n    /*=========================\n      Dom Library and plugins\n      ===========================*/\n\n    if (typeof $ !== 'undefined' && typeof Dom7 !== 'undefined') {\n      $ = Dom7;\n    }\n\n    if (typeof $ === 'undefined') {\n      if (typeof Dom7 === 'undefined') {\n        $ = window.Dom7 || window.Zepto || window.jQuery;\n      } else {\n        $ = Dom7;\n      }\n\n      if (!$) return;\n    } // Export it to Swiper instance\n\n\n    s.$ = $;\n    /*=========================\n      Breakpoints\n      ===========================*/\n\n    s.currentBreakpoint = undefined;\n\n    s.getActiveBreakpoint = function () {\n      //Get breakpoint for window width\n      if (!s.params.breakpoints) return false;\n      var breakpoint = false;\n      var points = [],\n          point;\n\n      for (point in s.params.breakpoints) {\n        if (s.params.breakpoints.hasOwnProperty(point)) {\n          points.push(point);\n        }\n      }\n\n      points.sort(function (a, b) {\n        return parseInt(a, 10) > parseInt(b, 10);\n      });\n\n      for (var i = 0; i < points.length; i++) {\n        point = points[i];\n\n        if (point >= window.innerWidth && !breakpoint) {\n          breakpoint = point;\n        }\n      }\n\n      return breakpoint || 'max';\n    };\n\n    s.setBreakpoint = function () {\n      //Set breakpoint for window width and update parameters\n      var breakpoint = s.getActiveBreakpoint();\n\n      if (breakpoint && s.currentBreakpoint !== breakpoint) {\n        var breakPointsParams = breakpoint in s.params.breakpoints ? s.params.breakpoints[breakpoint] : s.originalParams;\n        var needsReLoop = s.params.loop && breakPointsParams.slidesPerView !== s.params.slidesPerView;\n\n        for (var param in breakPointsParams) {\n          s.params[param] = breakPointsParams[param];\n        }\n\n        s.currentBreakpoint = breakpoint;\n\n        if (needsReLoop && s.destroyLoop) {\n          s.reLoop(true);\n        }\n      }\n    }; // Set breakpoint on load\n\n\n    if (s.params.breakpoints) {\n      s.setBreakpoint();\n    }\n    /*=========================\n      Preparation - Define Container, Wrapper and Pagination\n      ===========================*/\n\n\n    s.container = $(container);\n    if (s.container.length === 0) return;\n\n    if (s.container.length > 1) {\n      var swipers = [];\n      s.container.each(function () {\n        var container = this;\n        swipers.push(new Swiper(this, params));\n      });\n      return swipers;\n    } // Save instance in container HTML Element and in data\n\n\n    s.container[0].swiper = s;\n    s.container.data('swiper', s);\n    s.classNames.push(s.params.containerModifierClass + s.params.direction);\n\n    if (s.params.freeMode) {\n      s.classNames.push(s.params.containerModifierClass + 'free-mode');\n    }\n\n    if (!s.support.flexbox) {\n      s.classNames.push(s.params.containerModifierClass + 'no-flexbox');\n      s.params.slidesPerColumn = 1;\n    }\n\n    if (s.params.autoHeight) {\n      s.classNames.push(s.params.containerModifierClass + 'autoheight');\n    } // Enable slides progress when required\n\n\n    if (s.params.parallax || s.params.watchSlidesVisibility) {\n      s.params.watchSlidesProgress = true;\n    } // Max resistance when touchReleaseOnEdges\n\n\n    if (s.params.touchReleaseOnEdges) {\n      s.params.resistanceRatio = 0;\n    } // Coverflow / 3D\n\n\n    if (['cube', 'coverflow', 'flip'].indexOf(s.params.effect) >= 0) {\n      if (s.support.transforms3d) {\n        s.params.watchSlidesProgress = true;\n        s.classNames.push(s.params.containerModifierClass + '3d');\n      } else {\n        s.params.effect = 'slide';\n      }\n    }\n\n    if (s.params.effect !== 'slide') {\n      s.classNames.push(s.params.containerModifierClass + s.params.effect);\n    }\n\n    if (s.params.effect === 'cube') {\n      s.params.resistanceRatio = 0;\n      s.params.slidesPerView = 1;\n      s.params.slidesPerColumn = 1;\n      s.params.slidesPerGroup = 1;\n      s.params.centeredSlides = false;\n      s.params.spaceBetween = 0;\n      s.params.virtualTranslate = true;\n    }\n\n    if (s.params.effect === 'fade' || s.params.effect === 'flip') {\n      s.params.slidesPerView = 1;\n      s.params.slidesPerColumn = 1;\n      s.params.slidesPerGroup = 1;\n      s.params.watchSlidesProgress = true;\n      s.params.spaceBetween = 0;\n\n      if (typeof initialVirtualTranslate === 'undefined') {\n        s.params.virtualTranslate = true;\n      }\n    } // Grab Cursor\n\n\n    if (s.params.grabCursor && s.support.touch) {\n      s.params.grabCursor = false;\n    } // Wrapper\n\n\n    s.wrapper = s.container.children('.' + s.params.wrapperClass); // Pagination\n\n    if (s.params.pagination) {\n      s.paginationContainer = $(s.params.pagination);\n\n      if (s.params.uniqueNavElements && typeof s.params.pagination === 'string' && s.paginationContainer.length > 1 && s.container.find(s.params.pagination).length === 1) {\n        s.paginationContainer = s.container.find(s.params.pagination);\n      }\n\n      if (s.params.paginationType === 'bullets' && s.params.paginationClickable) {\n        s.paginationContainer.addClass(s.params.paginationModifierClass + 'clickable');\n      } else {\n        s.params.paginationClickable = false;\n      }\n\n      s.paginationContainer.addClass(s.params.paginationModifierClass + s.params.paginationType);\n    } // Next/Prev Buttons\n\n\n    if (s.params.nextButton || s.params.prevButton) {\n      if (s.params.nextButton) {\n        s.nextButton = $(s.params.nextButton);\n\n        if (s.params.uniqueNavElements && typeof s.params.nextButton === 'string' && s.nextButton.length > 1 && s.container.find(s.params.nextButton).length === 1) {\n          s.nextButton = s.container.find(s.params.nextButton);\n        }\n      }\n\n      if (s.params.prevButton) {\n        s.prevButton = $(s.params.prevButton);\n\n        if (s.params.uniqueNavElements && typeof s.params.prevButton === 'string' && s.prevButton.length > 1 && s.container.find(s.params.prevButton).length === 1) {\n          s.prevButton = s.container.find(s.params.prevButton);\n        }\n      }\n    } // Is Horizontal\n\n\n    s.isHorizontal = function () {\n      return s.params.direction === 'horizontal';\n    }; // s.isH = isH;\n    // RTL\n\n\n    s.rtl = s.isHorizontal() && (s.container[0].dir.toLowerCase() === 'rtl' || s.container.css('direction') === 'rtl');\n\n    if (s.rtl) {\n      s.classNames.push(s.params.containerModifierClass + 'rtl');\n    } // Wrong RTL support\n\n\n    if (s.rtl) {\n      s.wrongRTL = s.wrapper.css('display') === '-webkit-box';\n    } // Columns\n\n\n    if (s.params.slidesPerColumn > 1) {\n      s.classNames.push(s.params.containerModifierClass + 'multirow');\n    } // Check for Android\n\n\n    if (s.device.android) {\n      s.classNames.push(s.params.containerModifierClass + 'android');\n    } // Add classes\n\n\n    s.container.addClass(s.classNames.join(' ')); // Translate\n\n    s.translate = 0; // Progress\n\n    s.progress = 0; // Velocity\n\n    s.velocity = 0;\n    /*=========================\n      Locks, unlocks\n      ===========================*/\n\n    s.lockSwipeToNext = function () {\n      s.params.allowSwipeToNext = false;\n\n      if (s.params.allowSwipeToPrev === false && s.params.grabCursor) {\n        s.unsetGrabCursor();\n      }\n    };\n\n    s.lockSwipeToPrev = function () {\n      s.params.allowSwipeToPrev = false;\n\n      if (s.params.allowSwipeToNext === false && s.params.grabCursor) {\n        s.unsetGrabCursor();\n      }\n    };\n\n    s.lockSwipes = function () {\n      s.params.allowSwipeToNext = s.params.allowSwipeToPrev = false;\n      if (s.params.grabCursor) s.unsetGrabCursor();\n    };\n\n    s.unlockSwipeToNext = function () {\n      s.params.allowSwipeToNext = true;\n\n      if (s.params.allowSwipeToPrev === true && s.params.grabCursor) {\n        s.setGrabCursor();\n      }\n    };\n\n    s.unlockSwipeToPrev = function () {\n      s.params.allowSwipeToPrev = true;\n\n      if (s.params.allowSwipeToNext === true && s.params.grabCursor) {\n        s.setGrabCursor();\n      }\n    };\n\n    s.unlockSwipes = function () {\n      s.params.allowSwipeToNext = s.params.allowSwipeToPrev = true;\n      if (s.params.grabCursor) s.setGrabCursor();\n    };\n    /*=========================\n      Round helper\n      ===========================*/\n\n\n    function round(a) {\n      return Math.floor(a);\n    }\n    /*=========================\n      Set grab cursor\n      ===========================*/\n\n\n    s.setGrabCursor = function (moving) {\n      s.container[0].style.cursor = 'move';\n      s.container[0].style.cursor = moving ? '-webkit-grabbing' : '-webkit-grab';\n      s.container[0].style.cursor = moving ? '-moz-grabbin' : '-moz-grab';\n      s.container[0].style.cursor = moving ? 'grabbing' : 'grab';\n    };\n\n    s.unsetGrabCursor = function () {\n      s.container[0].style.cursor = '';\n    };\n\n    if (s.params.grabCursor) {\n      s.setGrabCursor();\n    }\n    /*=========================\n      Update on Images Ready\n      ===========================*/\n\n\n    s.imagesToLoad = [];\n    s.imagesLoaded = 0;\n\n    s.loadImage = function (imgElement, src, srcset, sizes, checkForComplete, callback) {\n      var image;\n\n      function onReady() {\n        if (callback) callback();\n      }\n\n      if (!imgElement.complete || !checkForComplete) {\n        if (src) {\n          image = new window.Image();\n          image.onload = onReady;\n          image.onerror = onReady;\n\n          if (sizes) {\n            image.sizes = sizes;\n          }\n\n          if (srcset) {\n            image.srcset = srcset;\n          }\n\n          if (src) {\n            image.src = src;\n          }\n        } else {\n          onReady();\n        }\n      } else {\n        //image already loaded...\n        onReady();\n      }\n    };\n\n    s.preloadImages = function () {\n      s.imagesToLoad = s.container.find('img');\n\n      function _onReady() {\n        if (typeof s === 'undefined' || s === null || !s) return;\n        if (s.imagesLoaded !== undefined) s.imagesLoaded++;\n\n        if (s.imagesLoaded === s.imagesToLoad.length) {\n          if (s.params.updateOnImagesReady) s.update();\n          s.emit('onImagesReady', s);\n        }\n      }\n\n      for (var i = 0; i < s.imagesToLoad.length; i++) {\n        s.loadImage(s.imagesToLoad[i], s.imagesToLoad[i].currentSrc || s.imagesToLoad[i].getAttribute('src'), s.imagesToLoad[i].srcset || s.imagesToLoad[i].getAttribute('srcset'), s.imagesToLoad[i].sizes || s.imagesToLoad[i].getAttribute('sizes'), true, _onReady);\n      }\n    };\n    /*=========================\n      Autoplay\n      ===========================*/\n\n\n    s.autoplayTimeoutId = undefined;\n    s.autoplaying = false;\n    s.autoplayPaused = false;\n\n    function autoplay() {\n      var autoplayDelay = s.params.autoplay;\n      var activeSlide = s.slides.eq(s.activeIndex);\n\n      if (activeSlide.attr('data-swiper-autoplay')) {\n        autoplayDelay = activeSlide.attr('data-swiper-autoplay') || s.params.autoplay;\n      }\n\n      s.autoplayTimeoutId = setTimeout(function () {\n        if (s.params.loop) {\n          s.fixLoop();\n\n          s._slideNext();\n\n          s.emit('onAutoplay', s);\n        } else {\n          if (!s.isEnd) {\n            s._slideNext();\n\n            s.emit('onAutoplay', s);\n          } else {\n            if (!params.autoplayStopOnLast) {\n              s._slideTo(0);\n\n              s.emit('onAutoplay', s);\n            } else {\n              s.stopAutoplay();\n            }\n          }\n        }\n      }, autoplayDelay);\n    }\n\n    s.startAutoplay = function () {\n      if (typeof s.autoplayTimeoutId !== 'undefined') return false;\n      if (!s.params.autoplay) return false;\n      if (s.autoplaying) return false;\n      s.autoplaying = true;\n      s.emit('onAutoplayStart', s);\n      autoplay();\n    };\n\n    s.stopAutoplay = function (internal) {\n      if (!s.autoplayTimeoutId) return;\n      if (s.autoplayTimeoutId) clearTimeout(s.autoplayTimeoutId);\n      s.autoplaying = false;\n      s.autoplayTimeoutId = undefined;\n      s.emit('onAutoplayStop', s);\n    };\n\n    s.pauseAutoplay = function (speed) {\n      if (s.autoplayPaused) return;\n      if (s.autoplayTimeoutId) clearTimeout(s.autoplayTimeoutId);\n      s.autoplayPaused = true;\n\n      if (speed === 0) {\n        s.autoplayPaused = false;\n        autoplay();\n      } else {\n        s.wrapper.transitionEnd(function () {\n          if (!s) return;\n          s.autoplayPaused = false;\n\n          if (!s.autoplaying) {\n            s.stopAutoplay();\n          } else {\n            autoplay();\n          }\n        });\n      }\n    };\n    /*=========================\n      Min/Max Translate\n      ===========================*/\n\n\n    s.minTranslate = function () {\n      return -s.snapGrid[0];\n    };\n\n    s.maxTranslate = function () {\n      return -s.snapGrid[s.snapGrid.length - 1];\n    };\n    /*=========================\n      Slider/slides sizes\n      ===========================*/\n\n\n    s.updateAutoHeight = function () {\n      var activeSlides = [];\n      var newHeight = 0;\n      var i; // Find slides currently in view\n\n      if (s.params.slidesPerView !== 'auto' && s.params.slidesPerView > 1) {\n        for (i = 0; i < Math.ceil(s.params.slidesPerView); i++) {\n          var index = s.activeIndex + i;\n          if (index > s.slides.length) break;\n          activeSlides.push(s.slides.eq(index)[0]);\n        }\n      } else {\n        activeSlides.push(s.slides.eq(s.activeIndex)[0]);\n      } // Find new height from heighest slide in view\n\n\n      for (i = 0; i < activeSlides.length; i++) {\n        if (typeof activeSlides[i] !== 'undefined') {\n          var height = activeSlides[i].offsetHeight;\n          newHeight = height > newHeight ? height : newHeight;\n        }\n      } // Update Height\n\n\n      if (newHeight) s.wrapper.css('height', newHeight + 'px');\n    };\n\n    s.updateContainerSize = function () {\n      var width, height;\n\n      if (typeof s.params.width !== 'undefined') {\n        width = s.params.width;\n      } else {\n        width = s.container[0].clientWidth;\n      }\n\n      if (typeof s.params.height !== 'undefined') {\n        height = s.params.height;\n      } else {\n        height = s.container[0].clientHeight;\n      }\n\n      if (width === 0 && s.isHorizontal() || height === 0 && !s.isHorizontal()) {\n        return;\n      } //Subtract paddings\n\n\n      width = width - parseInt(s.container.css('padding-left'), 10) - parseInt(s.container.css('padding-right'), 10);\n      height = height - parseInt(s.container.css('padding-top'), 10) - parseInt(s.container.css('padding-bottom'), 10); // Store values\n\n      s.width = width;\n      s.height = height;\n      s.size = s.isHorizontal() ? s.width : s.height;\n    };\n\n    s.updateSlidesSize = function () {\n      s.slides = s.wrapper.children('.' + s.params.slideClass);\n      s.snapGrid = [];\n      s.slidesGrid = [];\n      s.slidesSizesGrid = [];\n      var spaceBetween = s.params.spaceBetween,\n          slidePosition = -s.params.slidesOffsetBefore,\n          i,\n          prevSlideSize = 0,\n          index = 0;\n      if (typeof s.size === 'undefined') return;\n\n      if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\n        spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * s.size;\n      }\n\n      s.virtualSize = -spaceBetween; // reset margins\n\n      if (s.rtl) s.slides.css({\n        marginLeft: '',\n        marginTop: ''\n      });else s.slides.css({\n        marginRight: '',\n        marginBottom: ''\n      });\n      var slidesNumberEvenToRows;\n\n      if (s.params.slidesPerColumn > 1) {\n        if (Math.floor(s.slides.length / s.params.slidesPerColumn) === s.slides.length / s.params.slidesPerColumn) {\n          slidesNumberEvenToRows = s.slides.length;\n        } else {\n          slidesNumberEvenToRows = Math.ceil(s.slides.length / s.params.slidesPerColumn) * s.params.slidesPerColumn;\n        }\n\n        if (s.params.slidesPerView !== 'auto' && s.params.slidesPerColumnFill === 'row') {\n          slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, s.params.slidesPerView * s.params.slidesPerColumn);\n        }\n      } // Calc slides\n\n\n      var slideSize;\n      var slidesPerColumn = s.params.slidesPerColumn;\n      var slidesPerRow = slidesNumberEvenToRows / slidesPerColumn;\n      var numFullColumns = slidesPerRow - (s.params.slidesPerColumn * slidesPerRow - s.slides.length);\n\n      for (i = 0; i < s.slides.length; i++) {\n        slideSize = 0;\n        var slide = s.slides.eq(i);\n\n        if (s.params.slidesPerColumn > 1) {\n          // Set slides order\n          var newSlideOrderIndex;\n          var column, row;\n\n          if (s.params.slidesPerColumnFill === 'column') {\n            column = Math.floor(i / slidesPerColumn);\n            row = i - column * slidesPerColumn;\n\n            if (column > numFullColumns || column === numFullColumns && row === slidesPerColumn - 1) {\n              if (++row >= slidesPerColumn) {\n                row = 0;\n                column++;\n              }\n            }\n\n            newSlideOrderIndex = column + row * slidesNumberEvenToRows / slidesPerColumn;\n            slide.css({\n              '-webkit-box-ordinal-group': newSlideOrderIndex,\n              '-moz-box-ordinal-group': newSlideOrderIndex,\n              '-ms-flex-order': newSlideOrderIndex,\n              '-webkit-order': newSlideOrderIndex,\n              'order': newSlideOrderIndex\n            });\n          } else {\n            row = Math.floor(i / slidesPerRow);\n            column = i - row * slidesPerRow;\n          }\n\n          slide.css('margin-' + (s.isHorizontal() ? 'top' : 'left'), row !== 0 && s.params.spaceBetween && s.params.spaceBetween + 'px').attr('data-swiper-column', column).attr('data-swiper-row', row);\n        }\n\n        if (slide.css('display') === 'none') continue;\n\n        if (s.params.slidesPerView === 'auto') {\n          slideSize = s.isHorizontal() ? slide.outerWidth(true) : slide.outerHeight(true);\n          if (s.params.roundLengths) slideSize = round(slideSize);\n        } else {\n          slideSize = (s.size - (s.params.slidesPerView - 1) * spaceBetween) / s.params.slidesPerView;\n          if (s.params.roundLengths) slideSize = round(slideSize);\n\n          if (s.isHorizontal()) {\n            s.slides[i].style.width = slideSize + 'px';\n          } else {\n            s.slides[i].style.height = slideSize + 'px';\n          }\n        }\n\n        s.slides[i].swiperSlideSize = slideSize;\n        s.slidesSizesGrid.push(slideSize);\n\n        if (s.params.centeredSlides) {\n          slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\n          if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - s.size / 2 - spaceBetween;\n          if (i === 0) slidePosition = slidePosition - s.size / 2 - spaceBetween;\n          if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\n          if (index % s.params.slidesPerGroup === 0) s.snapGrid.push(slidePosition);\n          s.slidesGrid.push(slidePosition);\n        } else {\n          if (index % s.params.slidesPerGroup === 0) s.snapGrid.push(slidePosition);\n          s.slidesGrid.push(slidePosition);\n          slidePosition = slidePosition + slideSize + spaceBetween;\n        }\n\n        s.virtualSize += slideSize + spaceBetween;\n        prevSlideSize = slideSize;\n        index++;\n      }\n\n      s.virtualSize = Math.max(s.virtualSize, s.size) + s.params.slidesOffsetAfter;\n      var newSlidesGrid;\n\n      if (s.rtl && s.wrongRTL && (s.params.effect === 'slide' || s.params.effect === 'coverflow')) {\n        s.wrapper.css({\n          width: s.virtualSize + s.params.spaceBetween + 'px'\n        });\n      }\n\n      if (!s.support.flexbox || s.params.setWrapperSize) {\n        if (s.isHorizontal()) s.wrapper.css({\n          width: s.virtualSize + s.params.spaceBetween + 'px'\n        });else s.wrapper.css({\n          height: s.virtualSize + s.params.spaceBetween + 'px'\n        });\n      }\n\n      if (s.params.slidesPerColumn > 1) {\n        s.virtualSize = (slideSize + s.params.spaceBetween) * slidesNumberEvenToRows;\n        s.virtualSize = Math.ceil(s.virtualSize / s.params.slidesPerColumn) - s.params.spaceBetween;\n        if (s.isHorizontal()) s.wrapper.css({\n          width: s.virtualSize + s.params.spaceBetween + 'px'\n        });else s.wrapper.css({\n          height: s.virtualSize + s.params.spaceBetween + 'px'\n        });\n\n        if (s.params.centeredSlides) {\n          newSlidesGrid = [];\n\n          for (i = 0; i < s.snapGrid.length; i++) {\n            if (s.snapGrid[i] < s.virtualSize + s.snapGrid[0]) newSlidesGrid.push(s.snapGrid[i]);\n          }\n\n          s.snapGrid = newSlidesGrid;\n        }\n      } // Remove last grid elements depending on width\n\n\n      if (!s.params.centeredSlides) {\n        newSlidesGrid = [];\n\n        for (i = 0; i < s.snapGrid.length; i++) {\n          if (s.snapGrid[i] <= s.virtualSize - s.size) {\n            newSlidesGrid.push(s.snapGrid[i]);\n          }\n        }\n\n        s.snapGrid = newSlidesGrid;\n\n        if (Math.floor(s.virtualSize - s.size) - Math.floor(s.snapGrid[s.snapGrid.length - 1]) > 1) {\n          s.snapGrid.push(s.virtualSize - s.size);\n        }\n      }\n\n      if (s.snapGrid.length === 0) s.snapGrid = [0];\n\n      if (s.params.spaceBetween !== 0) {\n        if (s.isHorizontal()) {\n          if (s.rtl) s.slides.css({\n            marginLeft: spaceBetween + 'px'\n          });else s.slides.css({\n            marginRight: spaceBetween + 'px'\n          });\n        } else s.slides.css({\n          marginBottom: spaceBetween + 'px'\n        });\n      }\n\n      if (s.params.watchSlidesProgress) {\n        s.updateSlidesOffset();\n      }\n    };\n\n    s.updateSlidesOffset = function () {\n      for (var i = 0; i < s.slides.length; i++) {\n        s.slides[i].swiperSlideOffset = s.isHorizontal() ? s.slides[i].offsetLeft : s.slides[i].offsetTop;\n      }\n    };\n    /*=========================\n      Dynamic Slides Per View\n      ===========================*/\n\n\n    s.currentSlidesPerView = function () {\n      var spv = 1,\n          i,\n          j;\n\n      if (s.params.centeredSlides) {\n        var size = s.slides[s.activeIndex].swiperSlideSize;\n        var breakLoop;\n\n        for (i = s.activeIndex + 1; i < s.slides.length; i++) {\n          if (s.slides[i] && !breakLoop) {\n            size += s.slides[i].swiperSlideSize;\n            spv++;\n            if (size > s.size) breakLoop = true;\n          }\n        }\n\n        for (j = s.activeIndex - 1; j >= 0; j--) {\n          if (s.slides[j] && !breakLoop) {\n            size += s.slides[j].swiperSlideSize;\n            spv++;\n            if (size > s.size) breakLoop = true;\n          }\n        }\n      } else {\n        for (i = s.activeIndex + 1; i < s.slides.length; i++) {\n          if (s.slidesGrid[i] - s.slidesGrid[s.activeIndex] < s.size) {\n            spv++;\n          }\n        }\n      }\n\n      return spv;\n    };\n    /*=========================\n      Slider/slides progress\n      ===========================*/\n\n\n    s.updateSlidesProgress = function (translate) {\n      if (typeof translate === 'undefined') {\n        translate = s.translate || 0;\n      }\n\n      if (s.slides.length === 0) return;\n      if (typeof s.slides[0].swiperSlideOffset === 'undefined') s.updateSlidesOffset();\n      var offsetCenter = -translate;\n      if (s.rtl) offsetCenter = translate; // Visible Slides\n\n      s.slides.removeClass(s.params.slideVisibleClass);\n\n      for (var i = 0; i < s.slides.length; i++) {\n        var slide = s.slides[i];\n        var slideProgress = (offsetCenter + (s.params.centeredSlides ? s.minTranslate() : 0) - slide.swiperSlideOffset) / (slide.swiperSlideSize + s.params.spaceBetween);\n\n        if (s.params.watchSlidesVisibility) {\n          var slideBefore = -(offsetCenter - slide.swiperSlideOffset);\n          var slideAfter = slideBefore + s.slidesSizesGrid[i];\n          var isVisible = slideBefore >= 0 && slideBefore < s.size || slideAfter > 0 && slideAfter <= s.size || slideBefore <= 0 && slideAfter >= s.size;\n\n          if (isVisible) {\n            s.slides.eq(i).addClass(s.params.slideVisibleClass);\n          }\n        }\n\n        slide.progress = s.rtl ? -slideProgress : slideProgress;\n      }\n    };\n\n    s.updateProgress = function (translate) {\n      if (typeof translate === 'undefined') {\n        translate = s.translate || 0;\n      }\n\n      var translatesDiff = s.maxTranslate() - s.minTranslate();\n      var wasBeginning = s.isBeginning;\n      var wasEnd = s.isEnd;\n\n      if (translatesDiff === 0) {\n        s.progress = 0;\n        s.isBeginning = s.isEnd = true;\n      } else {\n        s.progress = (translate - s.minTranslate()) / translatesDiff;\n        s.isBeginning = s.progress <= 0;\n        s.isEnd = s.progress >= 1;\n      }\n\n      if (s.isBeginning && !wasBeginning) s.emit('onReachBeginning', s);\n      if (s.isEnd && !wasEnd) s.emit('onReachEnd', s);\n      if (s.params.watchSlidesProgress) s.updateSlidesProgress(translate);\n      s.emit('onProgress', s, s.progress);\n    };\n\n    s.updateActiveIndex = function () {\n      var translate = s.rtl ? s.translate : -s.translate;\n      var newActiveIndex, i, snapIndex;\n\n      for (i = 0; i < s.slidesGrid.length; i++) {\n        if (typeof s.slidesGrid[i + 1] !== 'undefined') {\n          if (translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1] - (s.slidesGrid[i + 1] - s.slidesGrid[i]) / 2) {\n            newActiveIndex = i;\n          } else if (translate >= s.slidesGrid[i] && translate < s.slidesGrid[i + 1]) {\n            newActiveIndex = i + 1;\n          }\n        } else {\n          if (translate >= s.slidesGrid[i]) {\n            newActiveIndex = i;\n          }\n        }\n      } // Normalize slideIndex\n\n\n      if (s.params.normalizeSlideIndex) {\n        if (newActiveIndex < 0 || typeof newActiveIndex === 'undefined') newActiveIndex = 0;\n      } // for (i = 0; i < s.slidesGrid.length; i++) {\n      // if (- translate >= s.slidesGrid[i]) {\n      // newActiveIndex = i;\n      // }\n      // }\n\n\n      snapIndex = Math.floor(newActiveIndex / s.params.slidesPerGroup);\n      if (snapIndex >= s.snapGrid.length) snapIndex = s.snapGrid.length - 1;\n\n      if (newActiveIndex === s.activeIndex) {\n        return;\n      }\n\n      s.snapIndex = snapIndex;\n      s.previousIndex = s.activeIndex;\n      s.activeIndex = newActiveIndex;\n      s.updateClasses();\n      s.updateRealIndex();\n    };\n\n    s.updateRealIndex = function () {\n      s.realIndex = parseInt(s.slides.eq(s.activeIndex).attr('data-swiper-slide-index') || s.activeIndex, 10);\n    };\n    /*=========================\n      Classes\n      ===========================*/\n\n\n    s.updateClasses = function () {\n      s.slides.removeClass(s.params.slideActiveClass + ' ' + s.params.slideNextClass + ' ' + s.params.slidePrevClass + ' ' + s.params.slideDuplicateActiveClass + ' ' + s.params.slideDuplicateNextClass + ' ' + s.params.slideDuplicatePrevClass);\n      var activeSlide = s.slides.eq(s.activeIndex); // Active classes\n\n      activeSlide.addClass(s.params.slideActiveClass);\n\n      if (params.loop) {\n        // Duplicate to all looped slides\n        if (activeSlide.hasClass(s.params.slideDuplicateClass)) {\n          s.wrapper.children('.' + s.params.slideClass + ':not(.' + s.params.slideDuplicateClass + ')[data-swiper-slide-index=\"' + s.realIndex + '\"]').addClass(s.params.slideDuplicateActiveClass);\n        } else {\n          s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass + '[data-swiper-slide-index=\"' + s.realIndex + '\"]').addClass(s.params.slideDuplicateActiveClass);\n        }\n      } // Next Slide\n\n\n      var nextSlide = activeSlide.next('.' + s.params.slideClass).addClass(s.params.slideNextClass);\n\n      if (s.params.loop && nextSlide.length === 0) {\n        nextSlide = s.slides.eq(0);\n        nextSlide.addClass(s.params.slideNextClass);\n      } // Prev Slide\n\n\n      var prevSlide = activeSlide.prev('.' + s.params.slideClass).addClass(s.params.slidePrevClass);\n\n      if (s.params.loop && prevSlide.length === 0) {\n        prevSlide = s.slides.eq(-1);\n        prevSlide.addClass(s.params.slidePrevClass);\n      }\n\n      if (params.loop) {\n        // Duplicate to all looped slides\n        if (nextSlide.hasClass(s.params.slideDuplicateClass)) {\n          s.wrapper.children('.' + s.params.slideClass + ':not(.' + s.params.slideDuplicateClass + ')[data-swiper-slide-index=\"' + nextSlide.attr('data-swiper-slide-index') + '\"]').addClass(s.params.slideDuplicateNextClass);\n        } else {\n          s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass + '[data-swiper-slide-index=\"' + nextSlide.attr('data-swiper-slide-index') + '\"]').addClass(s.params.slideDuplicateNextClass);\n        }\n\n        if (prevSlide.hasClass(s.params.slideDuplicateClass)) {\n          s.wrapper.children('.' + s.params.slideClass + ':not(.' + s.params.slideDuplicateClass + ')[data-swiper-slide-index=\"' + prevSlide.attr('data-swiper-slide-index') + '\"]').addClass(s.params.slideDuplicatePrevClass);\n        } else {\n          s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass + '[data-swiper-slide-index=\"' + prevSlide.attr('data-swiper-slide-index') + '\"]').addClass(s.params.slideDuplicatePrevClass);\n        }\n      } // Pagination\n\n\n      if (s.paginationContainer && s.paginationContainer.length > 0) {\n        // Current/Total\n        var current,\n            total = s.params.loop ? Math.ceil((s.slides.length - s.loopedSlides * 2) / s.params.slidesPerGroup) : s.snapGrid.length;\n\n        if (s.params.loop) {\n          current = Math.ceil((s.activeIndex - s.loopedSlides) / s.params.slidesPerGroup);\n\n          if (current > s.slides.length - 1 - s.loopedSlides * 2) {\n            current = current - (s.slides.length - s.loopedSlides * 2);\n          }\n\n          if (current > total - 1) current = current - total;\n          if (current < 0 && s.params.paginationType !== 'bullets') current = total + current;\n        } else {\n          if (typeof s.snapIndex !== 'undefined') {\n            current = s.snapIndex;\n          } else {\n            current = s.activeIndex || 0;\n          }\n        } // Types\n\n\n        if (s.params.paginationType === 'bullets' && s.bullets && s.bullets.length > 0) {\n          s.bullets.removeClass(s.params.bulletActiveClass);\n\n          if (s.paginationContainer.length > 1) {\n            s.bullets.each(function () {\n              if ($(this).index() === current) $(this).addClass(s.params.bulletActiveClass);\n            });\n          } else {\n            s.bullets.eq(current).addClass(s.params.bulletActiveClass);\n          }\n        }\n\n        if (s.params.paginationType === 'fraction') {\n          s.paginationContainer.find('.' + s.params.paginationCurrentClass).text(current + 1);\n          s.paginationContainer.find('.' + s.params.paginationTotalClass).text(total);\n        }\n\n        if (s.params.paginationType === 'progress') {\n          var scale = (current + 1) / total,\n              scaleX = scale,\n              scaleY = 1;\n\n          if (!s.isHorizontal()) {\n            scaleY = scale;\n            scaleX = 1;\n          }\n\n          s.paginationContainer.find('.' + s.params.paginationProgressbarClass).transform('translate3d(0,0,0) scaleX(' + scaleX + ') scaleY(' + scaleY + ')').transition(s.params.speed);\n        }\n\n        if (s.params.paginationType === 'custom' && s.params.paginationCustomRender) {\n          s.paginationContainer.html(s.params.paginationCustomRender(s, current + 1, total));\n          s.emit('onPaginationRendered', s, s.paginationContainer[0]);\n        }\n      } // Next/active buttons\n\n\n      if (!s.params.loop) {\n        if (s.params.prevButton && s.prevButton && s.prevButton.length > 0) {\n          if (s.isBeginning) {\n            s.prevButton.addClass(s.params.buttonDisabledClass);\n            if (s.params.a11y && s.a11y) s.a11y.disable(s.prevButton);\n          } else {\n            s.prevButton.removeClass(s.params.buttonDisabledClass);\n            if (s.params.a11y && s.a11y) s.a11y.enable(s.prevButton);\n          }\n        }\n\n        if (s.params.nextButton && s.nextButton && s.nextButton.length > 0) {\n          if (s.isEnd) {\n            s.nextButton.addClass(s.params.buttonDisabledClass);\n            if (s.params.a11y && s.a11y) s.a11y.disable(s.nextButton);\n          } else {\n            s.nextButton.removeClass(s.params.buttonDisabledClass);\n            if (s.params.a11y && s.a11y) s.a11y.enable(s.nextButton);\n          }\n        }\n      }\n    };\n    /*=========================\n      Pagination\n      ===========================*/\n\n\n    s.updatePagination = function () {\n      if (!s.params.pagination) return;\n\n      if (s.paginationContainer && s.paginationContainer.length > 0) {\n        var paginationHTML = '';\n\n        if (s.params.paginationType === 'bullets') {\n          var numberOfBullets = s.params.loop ? Math.ceil((s.slides.length - s.loopedSlides * 2) / s.params.slidesPerGroup) : s.snapGrid.length;\n\n          for (var i = 0; i < numberOfBullets; i++) {\n            if (s.params.paginationBulletRender) {\n              paginationHTML += s.params.paginationBulletRender(s, i, s.params.bulletClass);\n            } else {\n              paginationHTML += '<' + s.params.paginationElement + ' class=\"' + s.params.bulletClass + '\"></' + s.params.paginationElement + '>';\n            }\n          }\n\n          s.paginationContainer.html(paginationHTML);\n          s.bullets = s.paginationContainer.find('.' + s.params.bulletClass);\n\n          if (s.params.paginationClickable && s.params.a11y && s.a11y) {\n            s.a11y.initPagination();\n          }\n        }\n\n        if (s.params.paginationType === 'fraction') {\n          if (s.params.paginationFractionRender) {\n            paginationHTML = s.params.paginationFractionRender(s, s.params.paginationCurrentClass, s.params.paginationTotalClass);\n          } else {\n            paginationHTML = '<span class=\"' + s.params.paginationCurrentClass + '\"></span>' + ' / ' + '<span class=\"' + s.params.paginationTotalClass + '\"></span>';\n          }\n\n          s.paginationContainer.html(paginationHTML);\n        }\n\n        if (s.params.paginationType === 'progress') {\n          if (s.params.paginationProgressRender) {\n            paginationHTML = s.params.paginationProgressRender(s, s.params.paginationProgressbarClass);\n          } else {\n            paginationHTML = '<span class=\"' + s.params.paginationProgressbarClass + '\"></span>';\n          }\n\n          s.paginationContainer.html(paginationHTML);\n        }\n\n        if (s.params.paginationType !== 'custom') {\n          s.emit('onPaginationRendered', s, s.paginationContainer[0]);\n        }\n      }\n    };\n    /*=========================\n      Common update method\n      ===========================*/\n\n\n    s.update = function (updateTranslate) {\n      if (!s) return;\n      s.updateContainerSize();\n      s.updateSlidesSize();\n      s.updateProgress();\n      s.updatePagination();\n      s.updateClasses();\n\n      if (s.params.scrollbar && s.scrollbar) {\n        s.scrollbar.set();\n      }\n\n      var newTranslate;\n\n      function forceSetTranslate() {\n        var translate = s.rtl ? -s.translate : s.translate;\n        newTranslate = Math.min(Math.max(s.translate, s.maxTranslate()), s.minTranslate());\n        s.setWrapperTranslate(newTranslate);\n        s.updateActiveIndex();\n        s.updateClasses();\n      }\n\n      if (updateTranslate) {\n        var translated;\n\n        if (s.controller && s.controller.spline) {\n          s.controller.spline = undefined;\n        }\n\n        if (s.params.freeMode) {\n          forceSetTranslate();\n\n          if (s.params.autoHeight) {\n            s.updateAutoHeight();\n          }\n        } else {\n          if ((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides) {\n            translated = s.slideTo(s.slides.length - 1, 0, false, true);\n          } else {\n            translated = s.slideTo(s.activeIndex, 0, false, true);\n          }\n\n          if (!translated) {\n            forceSetTranslate();\n          }\n        }\n      } else if (s.params.autoHeight) {\n        s.updateAutoHeight();\n      }\n    };\n    /*=========================\n      Resize Handler\n      ===========================*/\n\n\n    s.onResize = function (forceUpdatePagination) {\n      if (s.params.onBeforeResize) s.params.onBeforeResize(s); //Breakpoints\n\n      if (s.params.breakpoints) {\n        s.setBreakpoint();\n      } // Disable locks on resize\n\n\n      var allowSwipeToPrev = s.params.allowSwipeToPrev;\n      var allowSwipeToNext = s.params.allowSwipeToNext;\n      s.params.allowSwipeToPrev = s.params.allowSwipeToNext = true;\n      s.updateContainerSize();\n      s.updateSlidesSize();\n      if (s.params.slidesPerView === 'auto' || s.params.freeMode || forceUpdatePagination) s.updatePagination();\n\n      if (s.params.scrollbar && s.scrollbar) {\n        s.scrollbar.set();\n      }\n\n      if (s.controller && s.controller.spline) {\n        s.controller.spline = undefined;\n      }\n\n      var slideChangedBySlideTo = false;\n\n      if (s.params.freeMode) {\n        var newTranslate = Math.min(Math.max(s.translate, s.maxTranslate()), s.minTranslate());\n        s.setWrapperTranslate(newTranslate);\n        s.updateActiveIndex();\n        s.updateClasses();\n\n        if (s.params.autoHeight) {\n          s.updateAutoHeight();\n        }\n      } else {\n        s.updateClasses();\n\n        if ((s.params.slidesPerView === 'auto' || s.params.slidesPerView > 1) && s.isEnd && !s.params.centeredSlides) {\n          slideChangedBySlideTo = s.slideTo(s.slides.length - 1, 0, false, true);\n        } else {\n          slideChangedBySlideTo = s.slideTo(s.activeIndex, 0, false, true);\n        }\n      }\n\n      if (s.params.lazyLoading && !slideChangedBySlideTo && s.lazy) {\n        s.lazy.load();\n      } // Return locks after resize\n\n\n      s.params.allowSwipeToPrev = allowSwipeToPrev;\n      s.params.allowSwipeToNext = allowSwipeToNext;\n      if (s.params.onAfterResize) s.params.onAfterResize(s);\n    };\n    /*=========================\n      Events\n      ===========================*/\n    //Define Touch Events\n\n\n    s.touchEventsDesktop = {\n      start: 'mousedown',\n      move: 'mousemove',\n      end: 'mouseup'\n    };\n    if (window.navigator.pointerEnabled) s.touchEventsDesktop = {\n      start: 'pointerdown',\n      move: 'pointermove',\n      end: 'pointerup'\n    };else if (window.navigator.msPointerEnabled) s.touchEventsDesktop = {\n      start: 'MSPointerDown',\n      move: 'MSPointerMove',\n      end: 'MSPointerUp'\n    };\n    s.touchEvents = {\n      start: s.support.touch || !s.params.simulateTouch ? 'touchstart' : s.touchEventsDesktop.start,\n      move: s.support.touch || !s.params.simulateTouch ? 'touchmove' : s.touchEventsDesktop.move,\n      end: s.support.touch || !s.params.simulateTouch ? 'touchend' : s.touchEventsDesktop.end\n    }; // WP8 Touch Events Fix\n\n    if (window.navigator.pointerEnabled || window.navigator.msPointerEnabled) {\n      (s.params.touchEventsTarget === 'container' ? s.container : s.wrapper).addClass('swiper-wp8-' + s.params.direction);\n    } // Attach/detach events\n\n\n    s.initEvents = function (detach) {\n      var actionDom = detach ? 'off' : 'on';\n      var action = detach ? 'removeEventListener' : 'addEventListener';\n      var touchEventsTarget = s.params.touchEventsTarget === 'container' ? s.container[0] : s.wrapper[0];\n      var target = s.support.touch ? touchEventsTarget : document;\n      var moveCapture = s.params.nested ? true : false; //Touch Events\n\n      if (s.browser.ie) {\n        touchEventsTarget[action](s.touchEvents.start, s.onTouchStart, false);\n        target[action](s.touchEvents.move, s.onTouchMove, moveCapture);\n        target[action](s.touchEvents.end, s.onTouchEnd, false);\n      } else {\n        if (s.support.touch) {\n          var passiveListener = s.touchEvents.start === 'touchstart' && s.support.passiveListener && s.params.passiveListeners ? {\n            passive: true,\n            capture: false\n          } : false;\n          touchEventsTarget[action](s.touchEvents.start, s.onTouchStart, passiveListener);\n          touchEventsTarget[action](s.touchEvents.move, s.onTouchMove, moveCapture);\n          touchEventsTarget[action](s.touchEvents.end, s.onTouchEnd, passiveListener);\n        }\n\n        if (params.simulateTouch && !s.device.ios && !s.device.android || params.simulateTouch && !s.support.touch && s.device.ios) {\n          touchEventsTarget[action]('mousedown', s.onTouchStart, false);\n          document[action]('mousemove', s.onTouchMove, moveCapture);\n          document[action]('mouseup', s.onTouchEnd, false);\n        }\n      }\n\n      window[action]('resize', s.onResize); // Next, Prev, Index\n\n      if (s.params.nextButton && s.nextButton && s.nextButton.length > 0) {\n        s.nextButton[actionDom]('click', s.onClickNext);\n        if (s.params.a11y && s.a11y) s.nextButton[actionDom]('keydown', s.a11y.onEnterKey);\n      }\n\n      if (s.params.prevButton && s.prevButton && s.prevButton.length > 0) {\n        s.prevButton[actionDom]('click', s.onClickPrev);\n        if (s.params.a11y && s.a11y) s.prevButton[actionDom]('keydown', s.a11y.onEnterKey);\n      }\n\n      if (s.params.pagination && s.params.paginationClickable) {\n        s.paginationContainer[actionDom]('click', '.' + s.params.bulletClass, s.onClickIndex);\n        if (s.params.a11y && s.a11y) s.paginationContainer[actionDom]('keydown', '.' + s.params.bulletClass, s.a11y.onEnterKey);\n      } // Prevent Links Clicks\n\n\n      if (s.params.preventClicks || s.params.preventClicksPropagation) touchEventsTarget[action]('click', s.preventClicks, true);\n    };\n\n    s.attachEvents = function () {\n      s.initEvents();\n    };\n\n    s.detachEvents = function () {\n      s.initEvents(true);\n    };\n    /*=========================\n      Handle Clicks\n      ===========================*/\n    // Prevent Clicks\n\n\n    s.allowClick = true;\n\n    s.preventClicks = function (e) {\n      if (!s.allowClick) {\n        if (s.params.preventClicks) e.preventDefault();\n\n        if (s.params.preventClicksPropagation && s.animating) {\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n        }\n      }\n    }; // Clicks\n\n\n    s.onClickNext = function (e) {\n      e.preventDefault();\n      if (s.isEnd && !s.params.loop) return;\n      s.slideNext();\n    };\n\n    s.onClickPrev = function (e) {\n      e.preventDefault();\n      if (s.isBeginning && !s.params.loop) return;\n      s.slidePrev();\n    };\n\n    s.onClickIndex = function (e) {\n      e.preventDefault();\n      var index = $(this).index() * s.params.slidesPerGroup;\n      if (s.params.loop) index = index + s.loopedSlides;\n      s.slideTo(index);\n    };\n    /*=========================\n      Handle Touches\n      ===========================*/\n\n\n    function findElementInEvent(e, selector) {\n      var el = $(e.target);\n\n      if (!el.is(selector)) {\n        if (typeof selector === 'string') {\n          el = el.parents(selector);\n        } else if (selector.nodeType) {\n          var found;\n          el.parents().each(function (index, _el) {\n            if (_el === selector) found = selector;\n          });\n          if (!found) return undefined;else return selector;\n        }\n      }\n\n      if (el.length === 0) {\n        return undefined;\n      }\n\n      return el[0];\n    }\n\n    s.updateClickedSlide = function (e) {\n      var slide = findElementInEvent(e, '.' + s.params.slideClass);\n      var slideFound = false;\n\n      if (slide) {\n        for (var i = 0; i < s.slides.length; i++) {\n          if (s.slides[i] === slide) slideFound = true;\n        }\n      }\n\n      if (slide && slideFound) {\n        s.clickedSlide = slide;\n        s.clickedIndex = $(slide).index();\n      } else {\n        s.clickedSlide = undefined;\n        s.clickedIndex = undefined;\n        return;\n      }\n\n      if (s.params.slideToClickedSlide && s.clickedIndex !== undefined && s.clickedIndex !== s.activeIndex) {\n        var slideToIndex = s.clickedIndex,\n            realIndex,\n            duplicatedSlides,\n            slidesPerView = s.params.slidesPerView === 'auto' ? s.currentSlidesPerView() : s.params.slidesPerView;\n\n        if (s.params.loop) {\n          if (s.animating) return;\n          realIndex = parseInt($(s.clickedSlide).attr('data-swiper-slide-index'), 10);\n\n          if (s.params.centeredSlides) {\n            if (slideToIndex < s.loopedSlides - slidesPerView / 2 || slideToIndex > s.slides.length - s.loopedSlides + slidesPerView / 2) {\n              s.fixLoop();\n              slideToIndex = s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index=\"' + realIndex + '\"]:not(.' + s.params.slideDuplicateClass + ')').eq(0).index();\n              setTimeout(function () {\n                s.slideTo(slideToIndex);\n              }, 0);\n            } else {\n              s.slideTo(slideToIndex);\n            }\n          } else {\n            if (slideToIndex > s.slides.length - slidesPerView) {\n              s.fixLoop();\n              slideToIndex = s.wrapper.children('.' + s.params.slideClass + '[data-swiper-slide-index=\"' + realIndex + '\"]:not(.' + s.params.slideDuplicateClass + ')').eq(0).index();\n              setTimeout(function () {\n                s.slideTo(slideToIndex);\n              }, 0);\n            } else {\n              s.slideTo(slideToIndex);\n            }\n          }\n        } else {\n          s.slideTo(slideToIndex);\n        }\n      }\n    };\n\n    var isTouched,\n        isMoved,\n        allowTouchCallbacks,\n        touchStartTime,\n        isScrolling,\n        currentTranslate,\n        startTranslate,\n        allowThresholdMove,\n        // Form elements to match\n    formElements = 'input, select, textarea, button, video',\n        // Last click time\n    lastClickTime = Date.now(),\n        clickTimeout,\n        //Velocities\n    velocities = [],\n        allowMomentumBounce; // Animating Flag\n\n    s.animating = false; // Touches information\n\n    s.touches = {\n      startX: 0,\n      startY: 0,\n      currentX: 0,\n      currentY: 0,\n      diff: 0\n    }; // Touch handlers\n\n    var isTouchEvent, startMoving;\n\n    s.onTouchStart = function (e) {\n      if (e.originalEvent) e = e.originalEvent;\n      isTouchEvent = e.type === 'touchstart';\n      if (!isTouchEvent && 'which' in e && e.which === 3) return;\n\n      if (s.params.noSwiping && findElementInEvent(e, '.' + s.params.noSwipingClass)) {\n        s.allowClick = true;\n        return;\n      }\n\n      if (s.params.swipeHandler) {\n        if (!findElementInEvent(e, s.params.swipeHandler)) return;\n      }\n\n      var startX = s.touches.currentX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n      var startY = s.touches.currentY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY; // Do NOT start if iOS edge swipe is detected. Otherwise iOS app (UIWebView) cannot swipe-to-go-back anymore\n\n      if (s.device.ios && s.params.iOSEdgeSwipeDetection && startX <= s.params.iOSEdgeSwipeThreshold) {\n        return;\n      }\n\n      isTouched = true;\n      isMoved = false;\n      allowTouchCallbacks = true;\n      isScrolling = undefined;\n      startMoving = undefined;\n      s.touches.startX = startX;\n      s.touches.startY = startY;\n      touchStartTime = Date.now();\n      s.allowClick = true;\n      s.updateContainerSize();\n      s.swipeDirection = undefined;\n      if (s.params.threshold > 0) allowThresholdMove = false;\n\n      if (e.type !== 'touchstart') {\n        var preventDefault = true;\n        if ($(e.target).is(formElements)) preventDefault = false;\n\n        if (document.activeElement && $(document.activeElement).is(formElements)) {\n          document.activeElement.blur();\n        }\n\n        if (preventDefault) {\n          e.preventDefault();\n        }\n      }\n\n      s.emit('onTouchStart', s, e);\n    };\n\n    s.onTouchMove = function (e) {\n      if (e.originalEvent) e = e.originalEvent;\n      if (isTouchEvent && e.type === 'mousemove') return;\n\n      if (e.preventedByNestedSwiper) {\n        s.touches.startX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n        s.touches.startY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n        return;\n      }\n\n      if (s.params.onlyExternal) {\n        // isMoved = true;\n        s.allowClick = false;\n\n        if (isTouched) {\n          s.touches.startX = s.touches.currentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n          s.touches.startY = s.touches.currentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n          touchStartTime = Date.now();\n        }\n\n        return;\n      }\n\n      if (isTouchEvent && s.params.touchReleaseOnEdges && !s.params.loop) {\n        if (!s.isHorizontal()) {\n          // Vertical\n          if (s.touches.currentY < s.touches.startY && s.translate <= s.maxTranslate() || s.touches.currentY > s.touches.startY && s.translate >= s.minTranslate()) {\n            return;\n          }\n        } else {\n          if (s.touches.currentX < s.touches.startX && s.translate <= s.maxTranslate() || s.touches.currentX > s.touches.startX && s.translate >= s.minTranslate()) {\n            return;\n          }\n        }\n      }\n\n      if (isTouchEvent && document.activeElement) {\n        if (e.target === document.activeElement && $(e.target).is(formElements)) {\n          isMoved = true;\n          s.allowClick = false;\n          return;\n        }\n      }\n\n      if (allowTouchCallbacks) {\n        s.emit('onTouchMove', s, e);\n      }\n\n      if (e.targetTouches && e.targetTouches.length > 1) return;\n      s.touches.currentX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n      s.touches.currentY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n      if (typeof isScrolling === 'undefined') {\n        var touchAngle;\n\n        if (s.isHorizontal() && s.touches.currentY === s.touches.startY || !s.isHorizontal() && s.touches.currentX === s.touches.startX) {\n          isScrolling = false;\n        } else {\n          touchAngle = Math.atan2(Math.abs(s.touches.currentY - s.touches.startY), Math.abs(s.touches.currentX - s.touches.startX)) * 180 / Math.PI;\n          isScrolling = s.isHorizontal() ? touchAngle > s.params.touchAngle : 90 - touchAngle > s.params.touchAngle;\n        }\n      }\n\n      if (isScrolling) {\n        s.emit('onTouchMoveOpposite', s, e);\n      }\n\n      if (typeof startMoving === 'undefined') {\n        if (s.touches.currentX !== s.touches.startX || s.touches.currentY !== s.touches.startY) {\n          startMoving = true;\n        }\n      }\n\n      if (!isTouched) return;\n\n      if (isScrolling) {\n        isTouched = false;\n        return;\n      }\n\n      if (!startMoving) {\n        return;\n      }\n\n      s.allowClick = false;\n      s.emit('onSliderMove', s, e);\n      e.preventDefault();\n\n      if (s.params.touchMoveStopPropagation && !s.params.nested) {\n        e.stopPropagation();\n      }\n\n      if (!isMoved) {\n        if (params.loop) {\n          s.fixLoop();\n        }\n\n        startTranslate = s.getWrapperTranslate();\n        s.setWrapperTransition(0);\n\n        if (s.animating) {\n          s.wrapper.trigger('webkitTransitionEnd transitionend oTransitionEnd MSTransitionEnd msTransitionEnd');\n        }\n\n        if (s.params.autoplay && s.autoplaying) {\n          if (s.params.autoplayDisableOnInteraction) {\n            s.stopAutoplay();\n          } else {\n            s.pauseAutoplay();\n          }\n        }\n\n        allowMomentumBounce = false; //Grab Cursor\n\n        if (s.params.grabCursor && (s.params.allowSwipeToNext === true || s.params.allowSwipeToPrev === true)) {\n          s.setGrabCursor(true);\n        }\n      }\n\n      isMoved = true;\n      var diff = s.touches.diff = s.isHorizontal() ? s.touches.currentX - s.touches.startX : s.touches.currentY - s.touches.startY;\n      diff = diff * s.params.touchRatio;\n      if (s.rtl) diff = -diff;\n      s.swipeDirection = diff > 0 ? 'prev' : 'next';\n      currentTranslate = diff + startTranslate;\n      var disableParentSwiper = true;\n\n      if (diff > 0 && currentTranslate > s.minTranslate()) {\n        disableParentSwiper = false;\n        if (s.params.resistance) currentTranslate = s.minTranslate() - 1 + Math.pow(-s.minTranslate() + startTranslate + diff, s.params.resistanceRatio);\n      } else if (diff < 0 && currentTranslate < s.maxTranslate()) {\n        disableParentSwiper = false;\n        if (s.params.resistance) currentTranslate = s.maxTranslate() + 1 - Math.pow(s.maxTranslate() - startTranslate - diff, s.params.resistanceRatio);\n      }\n\n      if (disableParentSwiper) {\n        e.preventedByNestedSwiper = true;\n      } // Directions locks\n\n\n      if (!s.params.allowSwipeToNext && s.swipeDirection === 'next' && currentTranslate < startTranslate) {\n        currentTranslate = startTranslate;\n      }\n\n      if (!s.params.allowSwipeToPrev && s.swipeDirection === 'prev' && currentTranslate > startTranslate) {\n        currentTranslate = startTranslate;\n      } // Threshold\n\n\n      if (s.params.threshold > 0) {\n        if (Math.abs(diff) > s.params.threshold || allowThresholdMove) {\n          if (!allowThresholdMove) {\n            allowThresholdMove = true;\n            s.touches.startX = s.touches.currentX;\n            s.touches.startY = s.touches.currentY;\n            currentTranslate = startTranslate;\n            s.touches.diff = s.isHorizontal() ? s.touches.currentX - s.touches.startX : s.touches.currentY - s.touches.startY;\n            return;\n          }\n        } else {\n          currentTranslate = startTranslate;\n          return;\n        }\n      }\n\n      if (!s.params.followFinger) return; // Update active index in free mode\n\n      if (s.params.freeMode || s.params.watchSlidesProgress) {\n        s.updateActiveIndex();\n      }\n\n      if (s.params.freeMode) {\n        //Velocity\n        if (velocities.length === 0) {\n          velocities.push({\n            position: s.touches[s.isHorizontal() ? 'startX' : 'startY'],\n            time: touchStartTime\n          });\n        }\n\n        velocities.push({\n          position: s.touches[s.isHorizontal() ? 'currentX' : 'currentY'],\n          time: new window.Date().getTime()\n        });\n      } // Update progress\n\n\n      s.updateProgress(currentTranslate); // Update translate\n\n      s.setWrapperTranslate(currentTranslate);\n    };\n\n    s.onTouchEnd = function (e) {\n      if (e.originalEvent) e = e.originalEvent;\n\n      if (allowTouchCallbacks) {\n        s.emit('onTouchEnd', s, e);\n      }\n\n      allowTouchCallbacks = false;\n      if (!isTouched) return; //Return Grab Cursor\n\n      if (s.params.grabCursor && isMoved && isTouched && (s.params.allowSwipeToNext === true || s.params.allowSwipeToPrev === true)) {\n        s.setGrabCursor(false);\n      } // Time diff\n\n\n      var touchEndTime = Date.now();\n      var timeDiff = touchEndTime - touchStartTime; // Tap, doubleTap, Click\n\n      if (s.allowClick) {\n        s.updateClickedSlide(e);\n        s.emit('onTap', s, e);\n\n        if (timeDiff < 300 && touchEndTime - lastClickTime > 300) {\n          if (clickTimeout) clearTimeout(clickTimeout);\n          clickTimeout = setTimeout(function () {\n            if (!s) return;\n\n            if (s.params.paginationHide && s.paginationContainer.length > 0 && !$(e.target).hasClass(s.params.bulletClass)) {\n              s.paginationContainer.toggleClass(s.params.paginationHiddenClass);\n            }\n\n            s.emit('onClick', s, e);\n          }, 300);\n        }\n\n        if (timeDiff < 300 && touchEndTime - lastClickTime < 300) {\n          if (clickTimeout) clearTimeout(clickTimeout);\n          s.emit('onDoubleTap', s, e);\n        }\n      }\n\n      lastClickTime = Date.now();\n      setTimeout(function () {\n        if (s) s.allowClick = true;\n      }, 0);\n\n      if (!isTouched || !isMoved || !s.swipeDirection || s.touches.diff === 0 || currentTranslate === startTranslate) {\n        isTouched = isMoved = false;\n        return;\n      }\n\n      isTouched = isMoved = false;\n      var currentPos;\n\n      if (s.params.followFinger) {\n        currentPos = s.rtl ? s.translate : -s.translate;\n      } else {\n        currentPos = -currentTranslate;\n      }\n\n      if (s.params.freeMode) {\n        if (currentPos < -s.minTranslate()) {\n          s.slideTo(s.activeIndex);\n          return;\n        } else if (currentPos > -s.maxTranslate()) {\n          if (s.slides.length < s.snapGrid.length) {\n            s.slideTo(s.snapGrid.length - 1);\n          } else {\n            s.slideTo(s.slides.length - 1);\n          }\n\n          return;\n        }\n\n        if (s.params.freeModeMomentum) {\n          if (velocities.length > 1) {\n            var lastMoveEvent = velocities.pop(),\n                velocityEvent = velocities.pop();\n            var distance = lastMoveEvent.position - velocityEvent.position;\n            var time = lastMoveEvent.time - velocityEvent.time;\n            s.velocity = distance / time;\n            s.velocity = s.velocity / 2;\n\n            if (Math.abs(s.velocity) < s.params.freeModeMinimumVelocity) {\n              s.velocity = 0;\n            } // this implies that the user stopped moving a finger then released.\n            // There would be no events with distance zero, so the last event is stale.\n\n\n            if (time > 150 || new window.Date().getTime() - lastMoveEvent.time > 300) {\n              s.velocity = 0;\n            }\n          } else {\n            s.velocity = 0;\n          }\n\n          s.velocity = s.velocity * s.params.freeModeMomentumVelocityRatio;\n          velocities.length = 0;\n          var momentumDuration = 1000 * s.params.freeModeMomentumRatio;\n          var momentumDistance = s.velocity * momentumDuration;\n          var newPosition = s.translate + momentumDistance;\n          if (s.rtl) newPosition = -newPosition;\n          var doBounce = false;\n          var afterBouncePosition;\n          var bounceAmount = Math.abs(s.velocity) * 20 * s.params.freeModeMomentumBounceRatio;\n\n          if (newPosition < s.maxTranslate()) {\n            if (s.params.freeModeMomentumBounce) {\n              if (newPosition + s.maxTranslate() < -bounceAmount) {\n                newPosition = s.maxTranslate() - bounceAmount;\n              }\n\n              afterBouncePosition = s.maxTranslate();\n              doBounce = true;\n              allowMomentumBounce = true;\n            } else {\n              newPosition = s.maxTranslate();\n            }\n          } else if (newPosition > s.minTranslate()) {\n            if (s.params.freeModeMomentumBounce) {\n              if (newPosition - s.minTranslate() > bounceAmount) {\n                newPosition = s.minTranslate() + bounceAmount;\n              }\n\n              afterBouncePosition = s.minTranslate();\n              doBounce = true;\n              allowMomentumBounce = true;\n            } else {\n              newPosition = s.minTranslate();\n            }\n          } else if (s.params.freeModeSticky) {\n            var j = 0,\n                nextSlide;\n\n            for (j = 0; j < s.snapGrid.length; j += 1) {\n              if (s.snapGrid[j] > -newPosition) {\n                nextSlide = j;\n                break;\n              }\n            }\n\n            if (Math.abs(s.snapGrid[nextSlide] - newPosition) < Math.abs(s.snapGrid[nextSlide - 1] - newPosition) || s.swipeDirection === 'next') {\n              newPosition = s.snapGrid[nextSlide];\n            } else {\n              newPosition = s.snapGrid[nextSlide - 1];\n            }\n\n            if (!s.rtl) newPosition = -newPosition;\n          } //Fix duration\n\n\n          if (s.velocity !== 0) {\n            if (s.rtl) {\n              momentumDuration = Math.abs((-newPosition - s.translate) / s.velocity);\n            } else {\n              momentumDuration = Math.abs((newPosition - s.translate) / s.velocity);\n            }\n          } else if (s.params.freeModeSticky) {\n            s.slideReset();\n            return;\n          }\n\n          if (s.params.freeModeMomentumBounce && doBounce) {\n            s.updateProgress(afterBouncePosition);\n            s.setWrapperTransition(momentumDuration);\n            s.setWrapperTranslate(newPosition);\n            s.onTransitionStart();\n            s.animating = true;\n            s.wrapper.transitionEnd(function () {\n              if (!s || !allowMomentumBounce) return;\n              s.emit('onMomentumBounce', s);\n              s.setWrapperTransition(s.params.speed);\n              s.setWrapperTranslate(afterBouncePosition);\n              s.wrapper.transitionEnd(function () {\n                if (!s) return;\n                s.onTransitionEnd();\n              });\n            });\n          } else if (s.velocity) {\n            s.updateProgress(newPosition);\n            s.setWrapperTransition(momentumDuration);\n            s.setWrapperTranslate(newPosition);\n            s.onTransitionStart();\n\n            if (!s.animating) {\n              s.animating = true;\n              s.wrapper.transitionEnd(function () {\n                if (!s) return;\n                s.onTransitionEnd();\n              });\n            }\n          } else {\n            s.updateProgress(newPosition);\n          }\n\n          s.updateActiveIndex();\n        }\n\n        if (!s.params.freeModeMomentum || timeDiff >= s.params.longSwipesMs) {\n          s.updateProgress();\n          s.updateActiveIndex();\n        }\n\n        return;\n      } // Find current slide\n\n\n      var i,\n          stopIndex = 0,\n          groupSize = s.slidesSizesGrid[0];\n\n      for (i = 0; i < s.slidesGrid.length; i += s.params.slidesPerGroup) {\n        if (typeof s.slidesGrid[i + s.params.slidesPerGroup] !== 'undefined') {\n          if (currentPos >= s.slidesGrid[i] && currentPos < s.slidesGrid[i + s.params.slidesPerGroup]) {\n            stopIndex = i;\n            groupSize = s.slidesGrid[i + s.params.slidesPerGroup] - s.slidesGrid[i];\n          }\n        } else {\n          if (currentPos >= s.slidesGrid[i]) {\n            stopIndex = i;\n            groupSize = s.slidesGrid[s.slidesGrid.length - 1] - s.slidesGrid[s.slidesGrid.length - 2];\n          }\n        }\n      } // Find current slide size\n\n\n      var ratio = (currentPos - s.slidesGrid[stopIndex]) / groupSize;\n\n      if (timeDiff > s.params.longSwipesMs) {\n        // Long touches\n        if (!s.params.longSwipes) {\n          s.slideTo(s.activeIndex);\n          return;\n        }\n\n        if (s.swipeDirection === 'next') {\n          if (ratio >= s.params.longSwipesRatio) s.slideTo(stopIndex + s.params.slidesPerGroup);else s.slideTo(stopIndex);\n        }\n\n        if (s.swipeDirection === 'prev') {\n          if (ratio > 1 - s.params.longSwipesRatio) s.slideTo(stopIndex + s.params.slidesPerGroup);else s.slideTo(stopIndex);\n        }\n      } else {\n        // Short swipes\n        if (!s.params.shortSwipes) {\n          s.slideTo(s.activeIndex);\n          return;\n        }\n\n        if (s.swipeDirection === 'next') {\n          s.slideTo(stopIndex + s.params.slidesPerGroup);\n        }\n\n        if (s.swipeDirection === 'prev') {\n          s.slideTo(stopIndex);\n        }\n      }\n    };\n    /*=========================\n      Transitions\n      ===========================*/\n\n\n    s._slideTo = function (slideIndex, speed) {\n      return s.slideTo(slideIndex, speed, true, true);\n    };\n\n    s.slideTo = function (slideIndex, speed, runCallbacks, internal) {\n      if (typeof runCallbacks === 'undefined') runCallbacks = true;\n      if (typeof slideIndex === 'undefined') slideIndex = 0;\n      if (slideIndex < 0) slideIndex = 0;\n      s.snapIndex = Math.floor(slideIndex / s.params.slidesPerGroup);\n      if (s.snapIndex >= s.snapGrid.length) s.snapIndex = s.snapGrid.length - 1;\n      var translate = -s.snapGrid[s.snapIndex]; // Stop autoplay\n\n      if (s.params.autoplay && s.autoplaying) {\n        if (internal || !s.params.autoplayDisableOnInteraction) {\n          s.pauseAutoplay(speed);\n        } else {\n          s.stopAutoplay();\n        }\n      } // Update progress\n\n\n      s.updateProgress(translate); // Normalize slideIndex\n\n      if (s.params.normalizeSlideIndex) {\n        for (var i = 0; i < s.slidesGrid.length; i++) {\n          if (-Math.floor(translate * 100) >= Math.floor(s.slidesGrid[i] * 100)) {\n            slideIndex = i;\n          }\n        }\n      } // Directions locks\n\n\n      if (!s.params.allowSwipeToNext && translate < s.translate && translate < s.minTranslate()) {\n        return false;\n      }\n\n      if (!s.params.allowSwipeToPrev && translate > s.translate && translate > s.maxTranslate()) {\n        if ((s.activeIndex || 0) !== slideIndex) return false;\n      } // Update Index\n\n\n      if (typeof speed === 'undefined') speed = s.params.speed;\n      s.previousIndex = s.activeIndex || 0;\n      s.activeIndex = slideIndex;\n      s.updateRealIndex();\n\n      if (s.rtl && -translate === s.translate || !s.rtl && translate === s.translate) {\n        // Update Height\n        if (s.params.autoHeight) {\n          s.updateAutoHeight();\n        }\n\n        s.updateClasses();\n\n        if (s.params.effect !== 'slide') {\n          s.setWrapperTranslate(translate);\n        }\n\n        return false;\n      }\n\n      s.updateClasses();\n      s.onTransitionStart(runCallbacks);\n\n      if (speed === 0 || s.browser.lteIE9) {\n        s.setWrapperTranslate(translate);\n        s.setWrapperTransition(0);\n        s.onTransitionEnd(runCallbacks);\n      } else {\n        s.setWrapperTranslate(translate);\n        s.setWrapperTransition(speed);\n\n        if (!s.animating) {\n          s.animating = true;\n          s.wrapper.transitionEnd(function () {\n            if (!s) return;\n            s.onTransitionEnd(runCallbacks);\n          });\n        }\n      }\n\n      return true;\n    };\n\n    s.onTransitionStart = function (runCallbacks) {\n      if (typeof runCallbacks === 'undefined') runCallbacks = true;\n\n      if (s.params.autoHeight) {\n        s.updateAutoHeight();\n      }\n\n      if (s.lazy) s.lazy.onTransitionStart();\n\n      if (runCallbacks) {\n        s.emit('onTransitionStart', s);\n\n        if (s.activeIndex !== s.previousIndex) {\n          s.emit('onSlideChangeStart', s);\n\n          if (s.activeIndex > s.previousIndex) {\n            s.emit('onSlideNextStart', s);\n          } else {\n            s.emit('onSlidePrevStart', s);\n          }\n        }\n      }\n    };\n\n    s.onTransitionEnd = function (runCallbacks) {\n      s.animating = false;\n      s.setWrapperTransition(0);\n      if (typeof runCallbacks === 'undefined') runCallbacks = true;\n      if (s.lazy) s.lazy.onTransitionEnd();\n\n      if (runCallbacks) {\n        s.emit('onTransitionEnd', s);\n\n        if (s.activeIndex !== s.previousIndex) {\n          s.emit('onSlideChangeEnd', s);\n\n          if (s.activeIndex > s.previousIndex) {\n            s.emit('onSlideNextEnd', s);\n          } else {\n            s.emit('onSlidePrevEnd', s);\n          }\n        }\n      }\n\n      if (s.params.history && s.history) {\n        s.history.setHistory(s.params.history, s.activeIndex);\n      }\n\n      if (s.params.hashnav && s.hashnav) {\n        s.hashnav.setHash();\n      }\n    };\n\n    s.slideNext = function (runCallbacks, speed, internal) {\n      if (s.params.loop) {\n        if (s.animating) return false;\n        s.fixLoop();\n        var clientLeft = s.container[0].clientLeft;\n        return s.slideTo(s.activeIndex + s.params.slidesPerGroup, speed, runCallbacks, internal);\n      } else return s.slideTo(s.activeIndex + s.params.slidesPerGroup, speed, runCallbacks, internal);\n    };\n\n    s._slideNext = function (speed) {\n      return s.slideNext(true, speed, true);\n    };\n\n    s.slidePrev = function (runCallbacks, speed, internal) {\n      if (s.params.loop) {\n        if (s.animating) return false;\n        s.fixLoop();\n        var clientLeft = s.container[0].clientLeft;\n        return s.slideTo(s.activeIndex - 1, speed, runCallbacks, internal);\n      } else return s.slideTo(s.activeIndex - 1, speed, runCallbacks, internal);\n    };\n\n    s._slidePrev = function (speed) {\n      return s.slidePrev(true, speed, true);\n    };\n\n    s.slideReset = function (runCallbacks, speed, internal) {\n      return s.slideTo(s.activeIndex, speed, runCallbacks);\n    };\n\n    s.disableTouchControl = function () {\n      s.params.onlyExternal = true;\n      return true;\n    };\n\n    s.enableTouchControl = function () {\n      s.params.onlyExternal = false;\n      return true;\n    };\n    /*=========================\n      Translate/transition helpers\n      ===========================*/\n\n\n    s.setWrapperTransition = function (duration, byController) {\n      s.wrapper.transition(duration);\n\n      if (s.params.effect !== 'slide' && s.effects[s.params.effect]) {\n        s.effects[s.params.effect].setTransition(duration);\n      }\n\n      if (s.params.parallax && s.parallax) {\n        s.parallax.setTransition(duration);\n      }\n\n      if (s.params.scrollbar && s.scrollbar) {\n        s.scrollbar.setTransition(duration);\n      }\n\n      if (s.params.control && s.controller) {\n        s.controller.setTransition(duration, byController);\n      }\n\n      s.emit('onSetTransition', s, duration);\n    };\n\n    s.setWrapperTranslate = function (translate, updateActiveIndex, byController) {\n      var x = 0,\n          y = 0,\n          z = 0;\n\n      if (s.isHorizontal()) {\n        x = s.rtl ? -translate : translate;\n      } else {\n        y = translate;\n      }\n\n      if (s.params.roundLengths) {\n        x = round(x);\n        y = round(y);\n      }\n\n      if (!s.params.virtualTranslate) {\n        if (s.support.transforms3d) s.wrapper.transform('translate3d(' + x + 'px, ' + y + 'px, ' + z + 'px)');else s.wrapper.transform('translate(' + x + 'px, ' + y + 'px)');\n      }\n\n      s.translate = s.isHorizontal() ? x : y; // Check if we need to update progress\n\n      var progress;\n      var translatesDiff = s.maxTranslate() - s.minTranslate();\n\n      if (translatesDiff === 0) {\n        progress = 0;\n      } else {\n        progress = (translate - s.minTranslate()) / translatesDiff;\n      }\n\n      if (progress !== s.progress) {\n        s.updateProgress(translate);\n      }\n\n      if (updateActiveIndex) s.updateActiveIndex();\n\n      if (s.params.effect !== 'slide' && s.effects[s.params.effect]) {\n        s.effects[s.params.effect].setTranslate(s.translate);\n      }\n\n      if (s.params.parallax && s.parallax) {\n        s.parallax.setTranslate(s.translate);\n      }\n\n      if (s.params.scrollbar && s.scrollbar) {\n        s.scrollbar.setTranslate(s.translate);\n      }\n\n      if (s.params.control && s.controller) {\n        s.controller.setTranslate(s.translate, byController);\n      }\n\n      s.emit('onSetTranslate', s, s.translate);\n    };\n\n    s.getTranslate = function (el, axis) {\n      var matrix, curTransform, curStyle, transformMatrix; // automatic axis detection\n\n      if (typeof axis === 'undefined') {\n        axis = 'x';\n      }\n\n      if (s.params.virtualTranslate) {\n        return s.rtl ? -s.translate : s.translate;\n      }\n\n      curStyle = window.getComputedStyle(el, null);\n\n      if (window.WebKitCSSMatrix) {\n        curTransform = curStyle.transform || curStyle.webkitTransform;\n\n        if (curTransform.split(',').length > 6) {\n          curTransform = curTransform.split(', ').map(function (a) {\n            return a.replace(',', '.');\n          }).join(', ');\n        } // Some old versions of Webkit choke when 'none' is passed; pass\n        // empty string instead in this case\n\n\n        transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\n      } else {\n        transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\n        matrix = transformMatrix.toString().split(',');\n      }\n\n      if (axis === 'x') {\n        //Latest Chrome and webkits Fix\n        if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41; //Crazy IE10 Matrix\n        else if (matrix.length === 16) curTransform = parseFloat(matrix[12]); //Normal Browsers\n          else curTransform = parseFloat(matrix[4]);\n      }\n\n      if (axis === 'y') {\n        //Latest Chrome and webkits Fix\n        if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42; //Crazy IE10 Matrix\n        else if (matrix.length === 16) curTransform = parseFloat(matrix[13]); //Normal Browsers\n          else curTransform = parseFloat(matrix[5]);\n      }\n\n      if (s.rtl && curTransform) curTransform = -curTransform;\n      return curTransform || 0;\n    };\n\n    s.getWrapperTranslate = function (axis) {\n      if (typeof axis === 'undefined') {\n        axis = s.isHorizontal() ? 'x' : 'y';\n      }\n\n      return s.getTranslate(s.wrapper[0], axis);\n    };\n    /*=========================\n      Observer\n      ===========================*/\n\n\n    s.observers = [];\n\n    function initObserver(target, options) {\n      options = options || {}; // create an observer instance\n\n      var ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\n      var observer = new ObserverFunc(function (mutations) {\n        mutations.forEach(function (mutation) {\n          s.onResize(true);\n          s.emit('onObserverUpdate', s, mutation);\n        });\n      });\n      observer.observe(target, {\n        attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\n        childList: typeof options.childList === 'undefined' ? true : options.childList,\n        characterData: typeof options.characterData === 'undefined' ? true : options.characterData\n      });\n      s.observers.push(observer);\n    }\n\n    s.initObservers = function () {\n      if (s.params.observeParents) {\n        var containerParents = s.container.parents();\n\n        for (var i = 0; i < containerParents.length; i++) {\n          initObserver(containerParents[i]);\n        }\n      } // Observe container\n\n\n      initObserver(s.container[0], {\n        childList: false\n      }); // Observe wrapper\n\n      initObserver(s.wrapper[0], {\n        attributes: false\n      });\n    };\n\n    s.disconnectObservers = function () {\n      for (var i = 0; i < s.observers.length; i++) {\n        s.observers[i].disconnect();\n      }\n\n      s.observers = [];\n    };\n    /*=========================\n      Loop\n      ===========================*/\n    // Create looped slides\n\n\n    s.createLoop = function () {\n      // Remove duplicated slides\n      s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();\n      var slides = s.wrapper.children('.' + s.params.slideClass);\n      if (s.params.slidesPerView === 'auto' && !s.params.loopedSlides) s.params.loopedSlides = slides.length;\n      s.loopedSlides = parseInt(s.params.loopedSlides || s.params.slidesPerView, 10);\n      s.loopedSlides = s.loopedSlides + s.params.loopAdditionalSlides;\n\n      if (s.loopedSlides > slides.length) {\n        s.loopedSlides = slides.length;\n      }\n\n      var prependSlides = [],\n          appendSlides = [],\n          i;\n      slides.each(function (index, el) {\n        var slide = $(this);\n        if (index < s.loopedSlides) appendSlides.push(el);\n        if (index < slides.length && index >= slides.length - s.loopedSlides) prependSlides.push(el);\n        slide.attr('data-swiper-slide-index', index);\n      });\n\n      for (i = 0; i < appendSlides.length; i++) {\n        s.wrapper.append($(appendSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));\n      }\n\n      for (i = prependSlides.length - 1; i >= 0; i--) {\n        s.wrapper.prepend($(prependSlides[i].cloneNode(true)).addClass(s.params.slideDuplicateClass));\n      }\n    };\n\n    s.destroyLoop = function () {\n      s.wrapper.children('.' + s.params.slideClass + '.' + s.params.slideDuplicateClass).remove();\n      s.slides.removeAttr('data-swiper-slide-index');\n    };\n\n    s.reLoop = function (updatePosition) {\n      var oldIndex = s.activeIndex - s.loopedSlides;\n      s.destroyLoop();\n      s.createLoop();\n      s.updateSlidesSize();\n\n      if (updatePosition) {\n        s.slideTo(oldIndex + s.loopedSlides, 0, false);\n      }\n    };\n\n    s.fixLoop = function () {\n      var newIndex; //Fix For Negative Oversliding\n\n      if (s.activeIndex < s.loopedSlides) {\n        newIndex = s.slides.length - s.loopedSlides * 3 + s.activeIndex;\n        newIndex = newIndex + s.loopedSlides;\n        s.slideTo(newIndex, 0, false, true);\n      } //Fix For Positive Oversliding\n      else if (s.params.slidesPerView === 'auto' && s.activeIndex >= s.loopedSlides * 2 || s.activeIndex > s.slides.length - s.params.slidesPerView * 2) {\n          newIndex = -s.slides.length + s.activeIndex + s.loopedSlides;\n          newIndex = newIndex + s.loopedSlides;\n          s.slideTo(newIndex, 0, false, true);\n        }\n    };\n    /*=========================\n      Append/Prepend/Remove Slides\n      ===========================*/\n\n\n    s.appendSlide = function (slides) {\n      if (s.params.loop) {\n        s.destroyLoop();\n      }\n\n      if (typeof slides === 'object' && slides.length) {\n        for (var i = 0; i < slides.length; i++) {\n          if (slides[i]) s.wrapper.append(slides[i]);\n        }\n      } else {\n        s.wrapper.append(slides);\n      }\n\n      if (s.params.loop) {\n        s.createLoop();\n      }\n\n      if (!(s.params.observer && s.support.observer)) {\n        s.update(true);\n      }\n    };\n\n    s.prependSlide = function (slides) {\n      if (s.params.loop) {\n        s.destroyLoop();\n      }\n\n      var newActiveIndex = s.activeIndex + 1;\n\n      if (typeof slides === 'object' && slides.length) {\n        for (var i = 0; i < slides.length; i++) {\n          if (slides[i]) s.wrapper.prepend(slides[i]);\n        }\n\n        newActiveIndex = s.activeIndex + slides.length;\n      } else {\n        s.wrapper.prepend(slides);\n      }\n\n      if (s.params.loop) {\n        s.createLoop();\n      }\n\n      if (!(s.params.observer && s.support.observer)) {\n        s.update(true);\n      }\n\n      s.slideTo(newActiveIndex, 0, false);\n    };\n\n    s.removeSlide = function (slidesIndexes) {\n      if (s.params.loop) {\n        s.destroyLoop();\n        s.slides = s.wrapper.children('.' + s.params.slideClass);\n      }\n\n      var newActiveIndex = s.activeIndex,\n          indexToRemove;\n\n      if (typeof slidesIndexes === 'object' && slidesIndexes.length) {\n        for (var i = 0; i < slidesIndexes.length; i++) {\n          indexToRemove = slidesIndexes[i];\n          if (s.slides[indexToRemove]) s.slides.eq(indexToRemove).remove();\n          if (indexToRemove < newActiveIndex) newActiveIndex--;\n        }\n\n        newActiveIndex = Math.max(newActiveIndex, 0);\n      } else {\n        indexToRemove = slidesIndexes;\n        if (s.slides[indexToRemove]) s.slides.eq(indexToRemove).remove();\n        if (indexToRemove < newActiveIndex) newActiveIndex--;\n        newActiveIndex = Math.max(newActiveIndex, 0);\n      }\n\n      if (s.params.loop) {\n        s.createLoop();\n      }\n\n      if (!(s.params.observer && s.support.observer)) {\n        s.update(true);\n      }\n\n      if (s.params.loop) {\n        s.slideTo(newActiveIndex + s.loopedSlides, 0, false);\n      } else {\n        s.slideTo(newActiveIndex, 0, false);\n      }\n    };\n\n    s.removeAllSlides = function () {\n      var slidesIndexes = [];\n\n      for (var i = 0; i < s.slides.length; i++) {\n        slidesIndexes.push(i);\n      }\n\n      s.removeSlide(slidesIndexes);\n    };\n    /*=========================\n      Effects\n      ===========================*/\n\n\n    s.effects = {\n      fade: {\n        setTranslate: function () {\n          for (var i = 0; i < s.slides.length; i++) {\n            var slide = s.slides.eq(i);\n            var offset = slide[0].swiperSlideOffset;\n            var tx = -offset;\n            if (!s.params.virtualTranslate) tx = tx - s.translate;\n            var ty = 0;\n\n            if (!s.isHorizontal()) {\n              ty = tx;\n              tx = 0;\n            }\n\n            var slideOpacity = s.params.fade.crossFade ? Math.max(1 - Math.abs(slide[0].progress), 0) : 1 + Math.min(Math.max(slide[0].progress, -1), 0);\n            slide.css({\n              opacity: slideOpacity\n            }).transform('translate3d(' + tx + 'px, ' + ty + 'px, 0px)');\n          }\n        },\n        setTransition: function (duration) {\n          s.slides.transition(duration);\n\n          if (s.params.virtualTranslate && duration !== 0) {\n            var eventTriggered = false;\n            s.slides.transitionEnd(function () {\n              if (eventTriggered) return;\n              if (!s) return;\n              eventTriggered = true;\n              s.animating = false;\n              var triggerEvents = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'];\n\n              for (var i = 0; i < triggerEvents.length; i++) {\n                s.wrapper.trigger(triggerEvents[i]);\n              }\n            });\n          }\n        }\n      },\n      flip: {\n        setTranslate: function () {\n          for (var i = 0; i < s.slides.length; i++) {\n            var slide = s.slides.eq(i);\n            var progress = slide[0].progress;\n\n            if (s.params.flip.limitRotation) {\n              progress = Math.max(Math.min(slide[0].progress, 1), -1);\n            }\n\n            var offset = slide[0].swiperSlideOffset;\n            var rotate = -180 * progress,\n                rotateY = rotate,\n                rotateX = 0,\n                tx = -offset,\n                ty = 0;\n\n            if (!s.isHorizontal()) {\n              ty = tx;\n              tx = 0;\n              rotateX = -rotateY;\n              rotateY = 0;\n            } else if (s.rtl) {\n              rotateY = -rotateY;\n            }\n\n            slide[0].style.zIndex = -Math.abs(Math.round(progress)) + s.slides.length;\n\n            if (s.params.flip.slideShadows) {\n              //Set shadows\n              var shadowBefore = s.isHorizontal() ? slide.find('.swiper-slide-shadow-left') : slide.find('.swiper-slide-shadow-top');\n              var shadowAfter = s.isHorizontal() ? slide.find('.swiper-slide-shadow-right') : slide.find('.swiper-slide-shadow-bottom');\n\n              if (shadowBefore.length === 0) {\n                shadowBefore = $('<div class=\"swiper-slide-shadow-' + (s.isHorizontal() ? 'left' : 'top') + '\"></div>');\n                slide.append(shadowBefore);\n              }\n\n              if (shadowAfter.length === 0) {\n                shadowAfter = $('<div class=\"swiper-slide-shadow-' + (s.isHorizontal() ? 'right' : 'bottom') + '\"></div>');\n                slide.append(shadowAfter);\n              }\n\n              if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n              if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n            }\n\n            slide.transform('translate3d(' + tx + 'px, ' + ty + 'px, 0px) rotateX(' + rotateX + 'deg) rotateY(' + rotateY + 'deg)');\n          }\n        },\n        setTransition: function (duration) {\n          s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n\n          if (s.params.virtualTranslate && duration !== 0) {\n            var eventTriggered = false;\n            s.slides.eq(s.activeIndex).transitionEnd(function () {\n              if (eventTriggered) return;\n              if (!s) return;\n              if (!$(this).hasClass(s.params.slideActiveClass)) return;\n              eventTriggered = true;\n              s.animating = false;\n              var triggerEvents = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'];\n\n              for (var i = 0; i < triggerEvents.length; i++) {\n                s.wrapper.trigger(triggerEvents[i]);\n              }\n            });\n          }\n        }\n      },\n      cube: {\n        setTranslate: function () {\n          var wrapperRotate = 0,\n              cubeShadow;\n\n          if (s.params.cube.shadow) {\n            if (s.isHorizontal()) {\n              cubeShadow = s.wrapper.find('.swiper-cube-shadow');\n\n              if (cubeShadow.length === 0) {\n                cubeShadow = $('<div class=\"swiper-cube-shadow\"></div>');\n                s.wrapper.append(cubeShadow);\n              }\n\n              cubeShadow.css({\n                height: s.width + 'px'\n              });\n            } else {\n              cubeShadow = s.container.find('.swiper-cube-shadow');\n\n              if (cubeShadow.length === 0) {\n                cubeShadow = $('<div class=\"swiper-cube-shadow\"></div>');\n                s.container.append(cubeShadow);\n              }\n            }\n          }\n\n          for (var i = 0; i < s.slides.length; i++) {\n            var slide = s.slides.eq(i);\n            var slideAngle = i * 90;\n            var round = Math.floor(slideAngle / 360);\n\n            if (s.rtl) {\n              slideAngle = -slideAngle;\n              round = Math.floor(-slideAngle / 360);\n            }\n\n            var progress = Math.max(Math.min(slide[0].progress, 1), -1);\n            var tx = 0,\n                ty = 0,\n                tz = 0;\n\n            if (i % 4 === 0) {\n              tx = -round * 4 * s.size;\n              tz = 0;\n            } else if ((i - 1) % 4 === 0) {\n              tx = 0;\n              tz = -round * 4 * s.size;\n            } else if ((i - 2) % 4 === 0) {\n              tx = s.size + round * 4 * s.size;\n              tz = s.size;\n            } else if ((i - 3) % 4 === 0) {\n              tx = -s.size;\n              tz = 3 * s.size + s.size * 4 * round;\n            }\n\n            if (s.rtl) {\n              tx = -tx;\n            }\n\n            if (!s.isHorizontal()) {\n              ty = tx;\n              tx = 0;\n            }\n\n            var transform = 'rotateX(' + (s.isHorizontal() ? 0 : -slideAngle) + 'deg) rotateY(' + (s.isHorizontal() ? slideAngle : 0) + 'deg) translate3d(' + tx + 'px, ' + ty + 'px, ' + tz + 'px)';\n\n            if (progress <= 1 && progress > -1) {\n              wrapperRotate = i * 90 + progress * 90;\n              if (s.rtl) wrapperRotate = -i * 90 - progress * 90;\n            }\n\n            slide.transform(transform);\n\n            if (s.params.cube.slideShadows) {\n              //Set shadows\n              var shadowBefore = s.isHorizontal() ? slide.find('.swiper-slide-shadow-left') : slide.find('.swiper-slide-shadow-top');\n              var shadowAfter = s.isHorizontal() ? slide.find('.swiper-slide-shadow-right') : slide.find('.swiper-slide-shadow-bottom');\n\n              if (shadowBefore.length === 0) {\n                shadowBefore = $('<div class=\"swiper-slide-shadow-' + (s.isHorizontal() ? 'left' : 'top') + '\"></div>');\n                slide.append(shadowBefore);\n              }\n\n              if (shadowAfter.length === 0) {\n                shadowAfter = $('<div class=\"swiper-slide-shadow-' + (s.isHorizontal() ? 'right' : 'bottom') + '\"></div>');\n                slide.append(shadowAfter);\n              }\n\n              if (shadowBefore.length) shadowBefore[0].style.opacity = Math.max(-progress, 0);\n              if (shadowAfter.length) shadowAfter[0].style.opacity = Math.max(progress, 0);\n            }\n          }\n\n          s.wrapper.css({\n            '-webkit-transform-origin': '50% 50% -' + s.size / 2 + 'px',\n            '-moz-transform-origin': '50% 50% -' + s.size / 2 + 'px',\n            '-ms-transform-origin': '50% 50% -' + s.size / 2 + 'px',\n            'transform-origin': '50% 50% -' + s.size / 2 + 'px'\n          });\n\n          if (s.params.cube.shadow) {\n            if (s.isHorizontal()) {\n              cubeShadow.transform('translate3d(0px, ' + (s.width / 2 + s.params.cube.shadowOffset) + 'px, ' + -s.width / 2 + 'px) rotateX(90deg) rotateZ(0deg) scale(' + s.params.cube.shadowScale + ')');\n            } else {\n              var shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\n              var multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\n              var scale1 = s.params.cube.shadowScale,\n                  scale2 = s.params.cube.shadowScale / multiplier,\n                  offset = s.params.cube.shadowOffset;\n              cubeShadow.transform('scale3d(' + scale1 + ', 1, ' + scale2 + ') translate3d(0px, ' + (s.height / 2 + offset) + 'px, ' + -s.height / 2 / scale2 + 'px) rotateX(-90deg)');\n            }\n          }\n\n          var zFactor = s.isSafari || s.isUiWebView ? -s.size / 2 : 0;\n          s.wrapper.transform('translate3d(0px,0,' + zFactor + 'px) rotateX(' + (s.isHorizontal() ? 0 : wrapperRotate) + 'deg) rotateY(' + (s.isHorizontal() ? -wrapperRotate : 0) + 'deg)');\n        },\n        setTransition: function (duration) {\n          s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n\n          if (s.params.cube.shadow && !s.isHorizontal()) {\n            s.container.find('.swiper-cube-shadow').transition(duration);\n          }\n        }\n      },\n      coverflow: {\n        setTranslate: function () {\n          var transform = s.translate;\n          var center = s.isHorizontal() ? -transform + s.width / 2 : -transform + s.height / 2;\n          var rotate = s.isHorizontal() ? s.params.coverflow.rotate : -s.params.coverflow.rotate;\n          var translate = s.params.coverflow.depth; //Each slide offset from center\n\n          for (var i = 0, length = s.slides.length; i < length; i++) {\n            var slide = s.slides.eq(i);\n            var slideSize = s.slidesSizesGrid[i];\n            var slideOffset = slide[0].swiperSlideOffset;\n            var offsetMultiplier = (center - slideOffset - slideSize / 2) / slideSize * s.params.coverflow.modifier;\n            var rotateY = s.isHorizontal() ? rotate * offsetMultiplier : 0;\n            var rotateX = s.isHorizontal() ? 0 : rotate * offsetMultiplier; // var rotateZ = 0\n\n            var translateZ = -translate * Math.abs(offsetMultiplier);\n            var translateY = s.isHorizontal() ? 0 : s.params.coverflow.stretch * offsetMultiplier;\n            var translateX = s.isHorizontal() ? s.params.coverflow.stretch * offsetMultiplier : 0; //Fix for ultra small values\n\n            if (Math.abs(translateX) < 0.001) translateX = 0;\n            if (Math.abs(translateY) < 0.001) translateY = 0;\n            if (Math.abs(translateZ) < 0.001) translateZ = 0;\n            if (Math.abs(rotateY) < 0.001) rotateY = 0;\n            if (Math.abs(rotateX) < 0.001) rotateX = 0;\n            var slideTransform = 'translate3d(' + translateX + 'px,' + translateY + 'px,' + translateZ + 'px)  rotateX(' + rotateX + 'deg) rotateY(' + rotateY + 'deg)';\n            slide.transform(slideTransform);\n            slide[0].style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\n\n            if (s.params.coverflow.slideShadows) {\n              //Set shadows\n              var shadowBefore = s.isHorizontal() ? slide.find('.swiper-slide-shadow-left') : slide.find('.swiper-slide-shadow-top');\n              var shadowAfter = s.isHorizontal() ? slide.find('.swiper-slide-shadow-right') : slide.find('.swiper-slide-shadow-bottom');\n\n              if (shadowBefore.length === 0) {\n                shadowBefore = $('<div class=\"swiper-slide-shadow-' + (s.isHorizontal() ? 'left' : 'top') + '\"></div>');\n                slide.append(shadowBefore);\n              }\n\n              if (shadowAfter.length === 0) {\n                shadowAfter = $('<div class=\"swiper-slide-shadow-' + (s.isHorizontal() ? 'right' : 'bottom') + '\"></div>');\n                slide.append(shadowAfter);\n              }\n\n              if (shadowBefore.length) shadowBefore[0].style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\n              if (shadowAfter.length) shadowAfter[0].style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\n            }\n          } //Set correct perspective for IE10\n\n\n          if (s.browser.ie) {\n            var ws = s.wrapper[0].style;\n            ws.perspectiveOrigin = center + 'px 50%';\n          }\n        },\n        setTransition: function (duration) {\n          s.slides.transition(duration).find('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').transition(duration);\n        }\n      }\n    };\n    /*=========================\n      Images Lazy Loading\n      ===========================*/\n\n    s.lazy = {\n      initialImageLoaded: false,\n      loadImageInSlide: function (index, loadInDuplicate) {\n        if (typeof index === 'undefined') return;\n        if (typeof loadInDuplicate === 'undefined') loadInDuplicate = true;\n        if (s.slides.length === 0) return;\n        var slide = s.slides.eq(index);\n        var img = slide.find('.' + s.params.lazyLoadingClass + ':not(.' + s.params.lazyStatusLoadedClass + '):not(.' + s.params.lazyStatusLoadingClass + ')');\n\n        if (slide.hasClass(s.params.lazyLoadingClass) && !slide.hasClass(s.params.lazyStatusLoadedClass) && !slide.hasClass(s.params.lazyStatusLoadingClass)) {\n          img = img.add(slide[0]);\n        }\n\n        if (img.length === 0) return;\n        img.each(function () {\n          var _img = $(this);\n\n          _img.addClass(s.params.lazyStatusLoadingClass);\n\n          var background = _img.attr('data-background');\n\n          var src = _img.attr('data-src'),\n              srcset = _img.attr('data-srcset'),\n              sizes = _img.attr('data-sizes');\n\n          s.loadImage(_img[0], src || background, srcset, sizes, false, function () {\n            if (typeof s === 'undefined' || s === null || !s) return;\n\n            if (background) {\n              _img.css('background-image', 'url(\"' + background + '\")');\n\n              _img.removeAttr('data-background');\n            } else {\n              if (srcset) {\n                _img.attr('srcset', srcset);\n\n                _img.removeAttr('data-srcset');\n              }\n\n              if (sizes) {\n                _img.attr('sizes', sizes);\n\n                _img.removeAttr('data-sizes');\n              }\n\n              if (src) {\n                _img.attr('src', src);\n\n                _img.removeAttr('data-src');\n              }\n            }\n\n            _img.addClass(s.params.lazyStatusLoadedClass).removeClass(s.params.lazyStatusLoadingClass);\n\n            slide.find('.' + s.params.lazyPreloaderClass + ', .' + s.params.preloaderClass).remove();\n\n            if (s.params.loop && loadInDuplicate) {\n              var slideOriginalIndex = slide.attr('data-swiper-slide-index');\n\n              if (slide.hasClass(s.params.slideDuplicateClass)) {\n                var originalSlide = s.wrapper.children('[data-swiper-slide-index=\"' + slideOriginalIndex + '\"]:not(.' + s.params.slideDuplicateClass + ')');\n                s.lazy.loadImageInSlide(originalSlide.index(), false);\n              } else {\n                var duplicatedSlide = s.wrapper.children('.' + s.params.slideDuplicateClass + '[data-swiper-slide-index=\"' + slideOriginalIndex + '\"]');\n                s.lazy.loadImageInSlide(duplicatedSlide.index(), false);\n              }\n            }\n\n            s.emit('onLazyImageReady', s, slide[0], _img[0]);\n          });\n          s.emit('onLazyImageLoad', s, slide[0], _img[0]);\n        });\n      },\n      load: function () {\n        var i;\n        var slidesPerView = s.params.slidesPerView;\n\n        if (slidesPerView === 'auto') {\n          slidesPerView = 0;\n        }\n\n        if (!s.lazy.initialImageLoaded) s.lazy.initialImageLoaded = true;\n\n        if (s.params.watchSlidesVisibility) {\n          s.wrapper.children('.' + s.params.slideVisibleClass).each(function () {\n            s.lazy.loadImageInSlide($(this).index());\n          });\n        } else {\n          if (slidesPerView > 1) {\n            for (i = s.activeIndex; i < s.activeIndex + slidesPerView; i++) {\n              if (s.slides[i]) s.lazy.loadImageInSlide(i);\n            }\n          } else {\n            s.lazy.loadImageInSlide(s.activeIndex);\n          }\n        }\n\n        if (s.params.lazyLoadingInPrevNext) {\n          if (slidesPerView > 1 || s.params.lazyLoadingInPrevNextAmount && s.params.lazyLoadingInPrevNextAmount > 1) {\n            var amount = s.params.lazyLoadingInPrevNextAmount;\n            var spv = slidesPerView;\n            var maxIndex = Math.min(s.activeIndex + spv + Math.max(amount, spv), s.slides.length);\n            var minIndex = Math.max(s.activeIndex - Math.max(spv, amount), 0); // Next Slides\n\n            for (i = s.activeIndex + slidesPerView; i < maxIndex; i++) {\n              if (s.slides[i]) s.lazy.loadImageInSlide(i);\n            } // Prev Slides\n\n\n            for (i = minIndex; i < s.activeIndex; i++) {\n              if (s.slides[i]) s.lazy.loadImageInSlide(i);\n            }\n          } else {\n            var nextSlide = s.wrapper.children('.' + s.params.slideNextClass);\n            if (nextSlide.length > 0) s.lazy.loadImageInSlide(nextSlide.index());\n            var prevSlide = s.wrapper.children('.' + s.params.slidePrevClass);\n            if (prevSlide.length > 0) s.lazy.loadImageInSlide(prevSlide.index());\n          }\n        }\n      },\n      onTransitionStart: function () {\n        if (s.params.lazyLoading) {\n          if (s.params.lazyLoadingOnTransitionStart || !s.params.lazyLoadingOnTransitionStart && !s.lazy.initialImageLoaded) {\n            s.lazy.load();\n          }\n        }\n      },\n      onTransitionEnd: function () {\n        if (s.params.lazyLoading && !s.params.lazyLoadingOnTransitionStart) {\n          s.lazy.load();\n        }\n      }\n    };\n    /*=========================\n      Scrollbar\n      ===========================*/\n\n    s.scrollbar = {\n      isTouched: false,\n      setDragPosition: function (e) {\n        var sb = s.scrollbar;\n        var x = 0,\n            y = 0;\n        var translate;\n        var pointerPosition = s.isHorizontal() ? e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX || e.clientX : e.type === 'touchstart' || e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY || e.clientY;\n        var position = pointerPosition - sb.track.offset()[s.isHorizontal() ? 'left' : 'top'] - sb.dragSize / 2;\n        var positionMin = -s.minTranslate() * sb.moveDivider;\n        var positionMax = -s.maxTranslate() * sb.moveDivider;\n\n        if (position < positionMin) {\n          position = positionMin;\n        } else if (position > positionMax) {\n          position = positionMax;\n        }\n\n        position = -position / sb.moveDivider;\n        s.updateProgress(position);\n        s.setWrapperTranslate(position, true);\n      },\n      dragStart: function (e) {\n        var sb = s.scrollbar;\n        sb.isTouched = true;\n        e.preventDefault();\n        e.stopPropagation();\n        sb.setDragPosition(e);\n        clearTimeout(sb.dragTimeout);\n        sb.track.transition(0);\n\n        if (s.params.scrollbarHide) {\n          sb.track.css('opacity', 1);\n        }\n\n        s.wrapper.transition(100);\n        sb.drag.transition(100);\n        s.emit('onScrollbarDragStart', s);\n      },\n      dragMove: function (e) {\n        var sb = s.scrollbar;\n        if (!sb.isTouched) return;\n        if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n        sb.setDragPosition(e);\n        s.wrapper.transition(0);\n        sb.track.transition(0);\n        sb.drag.transition(0);\n        s.emit('onScrollbarDragMove', s);\n      },\n      dragEnd: function (e) {\n        var sb = s.scrollbar;\n        if (!sb.isTouched) return;\n        sb.isTouched = false;\n\n        if (s.params.scrollbarHide) {\n          clearTimeout(sb.dragTimeout);\n          sb.dragTimeout = setTimeout(function () {\n            sb.track.css('opacity', 0);\n            sb.track.transition(400);\n          }, 1000);\n        }\n\n        s.emit('onScrollbarDragEnd', s);\n\n        if (s.params.scrollbarSnapOnRelease) {\n          s.slideReset();\n        }\n      },\n      draggableEvents: function () {\n        if (s.params.simulateTouch === false && !s.support.touch) return s.touchEventsDesktop;else return s.touchEvents;\n      }(),\n      enableDraggable: function () {\n        var sb = s.scrollbar;\n        var target = s.support.touch ? sb.track : document;\n        $(sb.track).on(sb.draggableEvents.start, sb.dragStart);\n        $(target).on(sb.draggableEvents.move, sb.dragMove);\n        $(target).on(sb.draggableEvents.end, sb.dragEnd);\n      },\n      disableDraggable: function () {\n        var sb = s.scrollbar;\n        var target = s.support.touch ? sb.track : document;\n        $(sb.track).off(sb.draggableEvents.start, sb.dragStart);\n        $(target).off(sb.draggableEvents.move, sb.dragMove);\n        $(target).off(sb.draggableEvents.end, sb.dragEnd);\n      },\n      set: function () {\n        if (!s.params.scrollbar) return;\n        var sb = s.scrollbar;\n        sb.track = $(s.params.scrollbar);\n\n        if (s.params.uniqueNavElements && typeof s.params.scrollbar === 'string' && sb.track.length > 1 && s.container.find(s.params.scrollbar).length === 1) {\n          sb.track = s.container.find(s.params.scrollbar);\n        }\n\n        sb.drag = sb.track.find('.swiper-scrollbar-drag');\n\n        if (sb.drag.length === 0) {\n          sb.drag = $('<div class=\"swiper-scrollbar-drag\"></div>');\n          sb.track.append(sb.drag);\n        }\n\n        sb.drag[0].style.width = '';\n        sb.drag[0].style.height = '';\n        sb.trackSize = s.isHorizontal() ? sb.track[0].offsetWidth : sb.track[0].offsetHeight;\n        sb.divider = s.size / s.virtualSize;\n        sb.moveDivider = sb.divider * (sb.trackSize / s.size);\n        sb.dragSize = sb.trackSize * sb.divider;\n\n        if (s.isHorizontal()) {\n          sb.drag[0].style.width = sb.dragSize + 'px';\n        } else {\n          sb.drag[0].style.height = sb.dragSize + 'px';\n        }\n\n        if (sb.divider >= 1) {\n          sb.track[0].style.display = 'none';\n        } else {\n          sb.track[0].style.display = '';\n        }\n\n        if (s.params.scrollbarHide) {\n          sb.track[0].style.opacity = 0;\n        }\n      },\n      setTranslate: function () {\n        if (!s.params.scrollbar) return;\n        var diff;\n        var sb = s.scrollbar;\n        var translate = s.translate || 0;\n        var newPos;\n        var newSize = sb.dragSize;\n        newPos = (sb.trackSize - sb.dragSize) * s.progress;\n\n        if (s.rtl && s.isHorizontal()) {\n          newPos = -newPos;\n\n          if (newPos > 0) {\n            newSize = sb.dragSize - newPos;\n            newPos = 0;\n          } else if (-newPos + sb.dragSize > sb.trackSize) {\n            newSize = sb.trackSize + newPos;\n          }\n        } else {\n          if (newPos < 0) {\n            newSize = sb.dragSize + newPos;\n            newPos = 0;\n          } else if (newPos + sb.dragSize > sb.trackSize) {\n            newSize = sb.trackSize - newPos;\n          }\n        }\n\n        if (s.isHorizontal()) {\n          if (s.support.transforms3d) {\n            sb.drag.transform('translate3d(' + newPos + 'px, 0, 0)');\n          } else {\n            sb.drag.transform('translateX(' + newPos + 'px)');\n          }\n\n          sb.drag[0].style.width = newSize + 'px';\n        } else {\n          if (s.support.transforms3d) {\n            sb.drag.transform('translate3d(0px, ' + newPos + 'px, 0)');\n          } else {\n            sb.drag.transform('translateY(' + newPos + 'px)');\n          }\n\n          sb.drag[0].style.height = newSize + 'px';\n        }\n\n        if (s.params.scrollbarHide) {\n          clearTimeout(sb.timeout);\n          sb.track[0].style.opacity = 1;\n          sb.timeout = setTimeout(function () {\n            sb.track[0].style.opacity = 0;\n            sb.track.transition(400);\n          }, 1000);\n        }\n      },\n      setTransition: function (duration) {\n        if (!s.params.scrollbar) return;\n        s.scrollbar.drag.transition(duration);\n      }\n    };\n    /*=========================\n      Controller\n      ===========================*/\n\n    s.controller = {\n      LinearSpline: function (x, y) {\n        var binarySearch = function () {\n          var maxIndex, minIndex, guess;\n          return function (array, val) {\n            minIndex = -1;\n            maxIndex = array.length;\n\n            while (maxIndex - minIndex > 1) if (array[guess = maxIndex + minIndex >> 1] <= val) {\n              minIndex = guess;\n            } else {\n              maxIndex = guess;\n            }\n\n            return maxIndex;\n          };\n        }();\n\n        this.x = x;\n        this.y = y;\n        this.lastIndex = x.length - 1; // Given an x value (x2), return the expected y2 value:\n        // (x1,y1) is the known point before given value,\n        // (x3,y3) is the known point after given value.\n\n        var i1, i3;\n        var l = this.x.length;\n\n        this.interpolate = function (x2) {\n          if (!x2) return 0; // Get the indexes of x1 and x3 (the array indexes before and after given x2):\n\n          i3 = binarySearch(this.x, x2);\n          i1 = i3 - 1; // We have our indexes i1 & i3, so we can calculate already:\n          // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\n\n          return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\n        };\n      },\n      //xxx: for now i will just save one spline function to to\n      getInterpolateFunction: function (c) {\n        if (!s.controller.spline) s.controller.spline = s.params.loop ? new s.controller.LinearSpline(s.slidesGrid, c.slidesGrid) : new s.controller.LinearSpline(s.snapGrid, c.snapGrid);\n      },\n      setTranslate: function (translate, byController) {\n        var controlled = s.params.control;\n        var multiplier, controlledTranslate;\n\n        function setControlledTranslate(c) {\n          // this will create an Interpolate function based on the snapGrids\n          // x is the Grid of the scrolled scroller and y will be the controlled scroller\n          // it makes sense to create this only once and recall it for the interpolation\n          // the function does a lot of value caching for performance\n          translate = c.rtl && c.params.direction === 'horizontal' ? -s.translate : s.translate;\n\n          if (s.params.controlBy === 'slide') {\n            s.controller.getInterpolateFunction(c); // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\n            // but it did not work out\n\n            controlledTranslate = -s.controller.spline.interpolate(-translate);\n          }\n\n          if (!controlledTranslate || s.params.controlBy === 'container') {\n            multiplier = (c.maxTranslate() - c.minTranslate()) / (s.maxTranslate() - s.minTranslate());\n            controlledTranslate = (translate - s.minTranslate()) * multiplier + c.minTranslate();\n          }\n\n          if (s.params.controlInverse) {\n            controlledTranslate = c.maxTranslate() - controlledTranslate;\n          }\n\n          c.updateProgress(controlledTranslate);\n          c.setWrapperTranslate(controlledTranslate, false, s);\n          c.updateActiveIndex();\n        }\n\n        if (Array.isArray(controlled)) {\n          for (var i = 0; i < controlled.length; i++) {\n            if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n              setControlledTranslate(controlled[i]);\n            }\n          }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n          setControlledTranslate(controlled);\n        }\n      },\n      setTransition: function (duration, byController) {\n        var controlled = s.params.control;\n        var i;\n\n        function setControlledTransition(c) {\n          c.setWrapperTransition(duration, s);\n\n          if (duration !== 0) {\n            c.onTransitionStart();\n            c.wrapper.transitionEnd(function () {\n              if (!controlled) return;\n\n              if (c.params.loop && s.params.controlBy === 'slide') {\n                c.fixLoop();\n              }\n\n              c.onTransitionEnd();\n            });\n          }\n        }\n\n        if (Array.isArray(controlled)) {\n          for (i = 0; i < controlled.length; i++) {\n            if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\n              setControlledTransition(controlled[i]);\n            }\n          }\n        } else if (controlled instanceof Swiper && byController !== controlled) {\n          setControlledTransition(controlled);\n        }\n      }\n    };\n    /*=========================\n      Hash Navigation\n      ===========================*/\n\n    s.hashnav = {\n      onHashCange: function (e, a) {\n        var newHash = document.location.hash.replace('#', '');\n        var activeSlideHash = s.slides.eq(s.activeIndex).attr('data-hash');\n\n        if (newHash !== activeSlideHash) {\n          s.slideTo(s.wrapper.children('.' + s.params.slideClass + '[data-hash=\"' + newHash + '\"]').index());\n        }\n      },\n      attachEvents: function (detach) {\n        var action = detach ? 'off' : 'on';\n        $(window)[action]('hashchange', s.hashnav.onHashCange);\n      },\n      setHash: function () {\n        if (!s.hashnav.initialized || !s.params.hashnav) return;\n\n        if (s.params.replaceState && window.history && window.history.replaceState) {\n          window.history.replaceState(null, null, '#' + s.slides.eq(s.activeIndex).attr('data-hash') || '');\n        } else {\n          var slide = s.slides.eq(s.activeIndex);\n          var hash = slide.attr('data-hash') || slide.attr('data-history');\n          document.location.hash = hash || '';\n        }\n      },\n      init: function () {\n        if (!s.params.hashnav || s.params.history) return;\n        s.hashnav.initialized = true;\n        var hash = document.location.hash.replace('#', '');\n\n        if (hash) {\n          var speed = 0;\n\n          for (var i = 0, length = s.slides.length; i < length; i++) {\n            var slide = s.slides.eq(i);\n            var slideHash = slide.attr('data-hash') || slide.attr('data-history');\n\n            if (slideHash === hash && !slide.hasClass(s.params.slideDuplicateClass)) {\n              var index = slide.index();\n              s.slideTo(index, speed, s.params.runCallbacksOnInit, true);\n            }\n          }\n        }\n\n        if (s.params.hashnavWatchState) s.hashnav.attachEvents();\n      },\n      destroy: function () {\n        if (s.params.hashnavWatchState) s.hashnav.attachEvents(true);\n      }\n    };\n    /*=========================\n      History Api with fallback to Hashnav\n      ===========================*/\n\n    s.history = {\n      init: function () {\n        if (!s.params.history) return;\n\n        if (!window.history || !window.history.pushState) {\n          s.params.history = false;\n          s.params.hashnav = true;\n          return;\n        }\n\n        s.history.initialized = true;\n        this.paths = this.getPathValues();\n        if (!this.paths.key && !this.paths.value) return;\n        this.scrollToSlide(0, this.paths.value, s.params.runCallbacksOnInit);\n\n        if (!s.params.replaceState) {\n          window.addEventListener('popstate', this.setHistoryPopState);\n        }\n      },\n      setHistoryPopState: function () {\n        s.history.paths = s.history.getPathValues();\n        s.history.scrollToSlide(s.params.speed, s.history.paths.value, false);\n      },\n      getPathValues: function () {\n        var pathArray = window.location.pathname.slice(1).split('/');\n        var total = pathArray.length;\n        var key = pathArray[total - 2];\n        var value = pathArray[total - 1];\n        return {\n          key: key,\n          value: value\n        };\n      },\n      setHistory: function (key, index) {\n        if (!s.history.initialized || !s.params.history) return;\n        var slide = s.slides.eq(index);\n        var value = this.slugify(slide.attr('data-history'));\n\n        if (!window.location.pathname.includes(key)) {\n          value = key + '/' + value;\n        }\n\n        if (s.params.replaceState) {\n          window.history.replaceState(null, null, value);\n        } else {\n          window.history.pushState(null, null, value);\n        }\n      },\n      slugify: function (text) {\n        return text.toString().toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w\\-]+/g, '').replace(/\\-\\-+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\n      },\n      scrollToSlide: function (speed, value, runCallbacks) {\n        if (value) {\n          for (var i = 0, length = s.slides.length; i < length; i++) {\n            var slide = s.slides.eq(i);\n            var slideHistory = this.slugify(slide.attr('data-history'));\n\n            if (slideHistory === value && !slide.hasClass(s.params.slideDuplicateClass)) {\n              var index = slide.index();\n              s.slideTo(index, speed, runCallbacks);\n            }\n          }\n        } else {\n          s.slideTo(0, speed, runCallbacks);\n        }\n      }\n    };\n    /*=========================\n      Keyboard Control\n      ===========================*/\n\n    function handleKeyboard(e) {\n      if (e.originalEvent) e = e.originalEvent; //jquery fix\n\n      var kc = e.keyCode || e.charCode; // Directions locks\n\n      if (!s.params.allowSwipeToNext && (s.isHorizontal() && kc === 39 || !s.isHorizontal() && kc === 40)) {\n        return false;\n      }\n\n      if (!s.params.allowSwipeToPrev && (s.isHorizontal() && kc === 37 || !s.isHorizontal() && kc === 38)) {\n        return false;\n      }\n\n      if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {\n        return;\n      }\n\n      if (kc === 37 || kc === 39 || kc === 38 || kc === 40) {\n        var inView = false; //Check that swiper should be inside of visible area of window\n\n        if (s.container.parents('.' + s.params.slideClass).length > 0 && s.container.parents('.' + s.params.slideActiveClass).length === 0) {\n          return;\n        }\n\n        var windowScroll = {\n          left: window.pageXOffset,\n          top: window.pageYOffset\n        };\n        var windowWidth = window.innerWidth;\n        var windowHeight = window.innerHeight;\n        var swiperOffset = s.container.offset();\n        if (s.rtl) swiperOffset.left = swiperOffset.left - s.container[0].scrollLeft;\n        var swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + s.width, swiperOffset.top], [swiperOffset.left, swiperOffset.top + s.height], [swiperOffset.left + s.width, swiperOffset.top + s.height]];\n\n        for (var i = 0; i < swiperCoord.length; i++) {\n          var point = swiperCoord[i];\n\n          if (point[0] >= windowScroll.left && point[0] <= windowScroll.left + windowWidth && point[1] >= windowScroll.top && point[1] <= windowScroll.top + windowHeight) {\n            inView = true;\n          }\n        }\n\n        if (!inView) return;\n      }\n\n      if (s.isHorizontal()) {\n        if (kc === 37 || kc === 39) {\n          if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n        }\n\n        if (kc === 39 && !s.rtl || kc === 37 && s.rtl) s.slideNext();\n        if (kc === 37 && !s.rtl || kc === 39 && s.rtl) s.slidePrev();\n      } else {\n        if (kc === 38 || kc === 40) {\n          if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n        }\n\n        if (kc === 40) s.slideNext();\n        if (kc === 38) s.slidePrev();\n      }\n\n      s.emit('onKeyPress', s, kc);\n    }\n\n    s.disableKeyboardControl = function () {\n      s.params.keyboardControl = false;\n      $(document).off('keydown', handleKeyboard);\n    };\n\n    s.enableKeyboardControl = function () {\n      s.params.keyboardControl = true;\n      $(document).on('keydown', handleKeyboard);\n    };\n    /*=========================\n      Mousewheel Control\n      ===========================*/\n\n\n    s.mousewheel = {\n      event: false,\n      lastScrollTime: new window.Date().getTime()\n    };\n\n    function isEventSupported() {\n      var eventName = 'onwheel';\n      var isSupported = eventName in document;\n\n      if (!isSupported) {\n        var element = document.createElement('div');\n        element.setAttribute(eventName, 'return;');\n        isSupported = typeof element[eventName] === 'function';\n      }\n\n      if (!isSupported && document.implementation && document.implementation.hasFeature && // always returns true in newer browsers as per the standard.\n      // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature\n      document.implementation.hasFeature('', '') !== true) {\n        // This is the only way to test support for the `wheel` event in IE9+.\n        isSupported = document.implementation.hasFeature('Events.wheel', '3.0');\n      }\n\n      return isSupported;\n    }\n    /**\n     * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is\n     * complicated, thus this doc is long and (hopefully) detailed enough to answer\n     * your questions.\n     *\n     * If you need to react to the mouse wheel in a predictable way, this code is\n     * like your bestest friend. * hugs *\n     *\n     * As of today, there are 4 DOM event types you can listen to:\n     *\n     *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)\n     *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari\n     *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!\n     *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003\n     *\n     * So what to do?  The is the best:\n     *\n     *   normalizeWheel.getEventType();\n     *\n     * In your event callback, use this code to get sane interpretation of the\n     * deltas.  This code will return an object with properties:\n     *\n     *   spinX   -- normalized spin speed (use for zoom) - x plane\n     *   spinY   -- \" - y plane\n     *   pixelX  -- normalized distance (to pixels) - x plane\n     *   pixelY  -- \" - y plane\n     *\n     * Wheel values are provided by the browser assuming you are using the wheel to\n     * scroll a web page by a number of lines or pixels (or pages).  Values can vary\n     * significantly on different platforms and browsers, forgetting that you can\n     * scroll at different speeds.  Some devices (like trackpads) emit more events\n     * at smaller increments with fine granularity, and some emit massive jumps with\n     * linear speed or acceleration.\n     *\n     * This code does its best to normalize the deltas for you:\n     *\n     *   - spin is trying to normalize how far the wheel was spun (or trackpad\n     *     dragged).  This is super useful for zoom support where you want to\n     *     throw away the chunky scroll steps on the PC and make those equal to\n     *     the slow and smooth tiny steps on the Mac. Key data: This code tries to\n     *     resolve a single slow step on a wheel to 1.\n     *\n     *   - pixel is normalizing the desired scroll delta in pixel units.  You'll\n     *     get the crazy differences between browsers, but at least it'll be in\n     *     pixels!\n     *\n     *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This\n     *     should translate to positive value zooming IN, negative zooming OUT.\n     *     This matches the newer 'wheel' event.\n     *\n     * Why are there spinX, spinY (or pixels)?\n     *\n     *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn\n     *     with a mouse.  It results in side-scrolling in the browser by default.\n     *\n     *   - spinY is what you expect -- it's the classic axis of a mouse wheel.\n     *\n     *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and\n     *     probably is by browsers in conjunction with fancy 3D controllers .. but\n     *     you know.\n     *\n     * Implementation info:\n     *\n     * Examples of 'wheel' event if you scroll slowly (down) by one step with an\n     * average mouse:\n     *\n     *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)\n     *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)\n     *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)\n     *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)\n     *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)\n     *\n     * On the trackpad:\n     *\n     *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)\n     *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)\n     *\n     * On other/older browsers.. it's more complicated as there can be multiple and\n     * also missing delta values.\n     *\n     * The 'wheel' event is more standard:\n     *\n     * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents\n     *\n     * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and\n     * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain\n     * backward compatibility with older events.  Those other values help us\n     * better normalize spin speed.  Example of what the browsers provide:\n     *\n     *                          | event.wheelDelta | event.detail\n     *        ------------------+------------------+--------------\n     *          Safari v5/OS X  |       -120       |       0\n     *          Safari v5/Win7  |       -120       |       0\n     *         Chrome v17/OS X  |       -120       |       0\n     *         Chrome v17/Win7  |       -120       |       0\n     *                IE9/Win7  |       -120       |   undefined\n     *         Firefox v4/OS X  |     undefined    |       1\n     *         Firefox v4/Win7  |     undefined    |       3\n     *\n     */\n\n\n    function normalizeWheel(\n    /*object*/\n    event)\n    /*object*/\n    {\n      // Reasonable defaults\n      var PIXEL_STEP = 10;\n      var LINE_HEIGHT = 40;\n      var PAGE_HEIGHT = 800;\n      var sX = 0,\n          sY = 0,\n          // spinX, spinY\n      pX = 0,\n          pY = 0; // pixelX, pixelY\n      // Legacy\n\n      if ('detail' in event) {\n        sY = event.detail;\n      }\n\n      if ('wheelDelta' in event) {\n        sY = -event.wheelDelta / 120;\n      }\n\n      if ('wheelDeltaY' in event) {\n        sY = -event.wheelDeltaY / 120;\n      }\n\n      if ('wheelDeltaX' in event) {\n        sX = -event.wheelDeltaX / 120;\n      } // side scrolling on FF with DOMMouseScroll\n\n\n      if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {\n        sX = sY;\n        sY = 0;\n      }\n\n      pX = sX * PIXEL_STEP;\n      pY = sY * PIXEL_STEP;\n\n      if ('deltaY' in event) {\n        pY = event.deltaY;\n      }\n\n      if ('deltaX' in event) {\n        pX = event.deltaX;\n      }\n\n      if ((pX || pY) && event.deltaMode) {\n        if (event.deltaMode === 1) {\n          // delta in LINE units\n          pX *= LINE_HEIGHT;\n          pY *= LINE_HEIGHT;\n        } else {\n          // delta in PAGE units\n          pX *= PAGE_HEIGHT;\n          pY *= PAGE_HEIGHT;\n        }\n      } // Fall-back if spin cannot be determined\n\n\n      if (pX && !sX) {\n        sX = pX < 1 ? -1 : 1;\n      }\n\n      if (pY && !sY) {\n        sY = pY < 1 ? -1 : 1;\n      }\n\n      return {\n        spinX: sX,\n        spinY: sY,\n        pixelX: pX,\n        pixelY: pY\n      };\n    }\n\n    if (s.params.mousewheelControl) {\n      /**\n       * The best combination if you prefer spinX + spinY normalization.  It favors\n       * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with\n       * 'wheel' event, making spin speed determination impossible.\n       */\n      s.mousewheel.event = navigator.userAgent.indexOf('firefox') > -1 ? 'DOMMouseScroll' : isEventSupported() ? 'wheel' : 'mousewheel';\n    }\n\n    function handleMousewheel(e) {\n      if (e.originalEvent) e = e.originalEvent; //jquery fix\n\n      var delta = 0;\n      var rtlFactor = s.rtl ? -1 : 1;\n      var data = normalizeWheel(e);\n\n      if (s.params.mousewheelForceToAxis) {\n        if (s.isHorizontal()) {\n          if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = data.pixelX * rtlFactor;else return;\n        } else {\n          if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = data.pixelY;else return;\n        }\n      } else {\n        delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\n      }\n\n      if (delta === 0) return;\n      if (s.params.mousewheelInvert) delta = -delta;\n\n      if (!s.params.freeMode) {\n        if (new window.Date().getTime() - s.mousewheel.lastScrollTime > 60) {\n          if (delta < 0) {\n            if ((!s.isEnd || s.params.loop) && !s.animating) {\n              s.slideNext();\n              s.emit('onScroll', s, e);\n            } else if (s.params.mousewheelReleaseOnEdges) return true;\n          } else {\n            if ((!s.isBeginning || s.params.loop) && !s.animating) {\n              s.slidePrev();\n              s.emit('onScroll', s, e);\n            } else if (s.params.mousewheelReleaseOnEdges) return true;\n          }\n        }\n\n        s.mousewheel.lastScrollTime = new window.Date().getTime();\n      } else {\n        //Freemode or scrollContainer:\n        var position = s.getWrapperTranslate() + delta * s.params.mousewheelSensitivity;\n        var wasBeginning = s.isBeginning,\n            wasEnd = s.isEnd;\n        if (position >= s.minTranslate()) position = s.minTranslate();\n        if (position <= s.maxTranslate()) position = s.maxTranslate();\n        s.setWrapperTransition(0);\n        s.setWrapperTranslate(position);\n        s.updateProgress();\n        s.updateActiveIndex();\n\n        if (!wasBeginning && s.isBeginning || !wasEnd && s.isEnd) {\n          s.updateClasses();\n        }\n\n        if (s.params.freeModeSticky) {\n          clearTimeout(s.mousewheel.timeout);\n          s.mousewheel.timeout = setTimeout(function () {\n            s.slideReset();\n          }, 300);\n        } else {\n          if (s.params.lazyLoading && s.lazy) {\n            s.lazy.load();\n          }\n        } // Emit event\n\n\n        s.emit('onScroll', s, e); // Stop autoplay\n\n        if (s.params.autoplay && s.params.autoplayDisableOnInteraction) s.stopAutoplay(); // Return page scroll on edge positions\n\n        if (position === 0 || position === s.maxTranslate()) return;\n      }\n\n      if (e.preventDefault) e.preventDefault();else e.returnValue = false;\n      return false;\n    }\n\n    s.disableMousewheelControl = function () {\n      if (!s.mousewheel.event) return false;\n      var target = s.container;\n\n      if (s.params.mousewheelEventsTarged !== 'container') {\n        target = $(s.params.mousewheelEventsTarged);\n      }\n\n      target.off(s.mousewheel.event, handleMousewheel);\n      s.params.mousewheelControl = false;\n      return true;\n    };\n\n    s.enableMousewheelControl = function () {\n      if (!s.mousewheel.event) return false;\n      var target = s.container;\n\n      if (s.params.mousewheelEventsTarged !== 'container') {\n        target = $(s.params.mousewheelEventsTarged);\n      }\n\n      target.on(s.mousewheel.event, handleMousewheel);\n      s.params.mousewheelControl = true;\n      return true;\n    };\n    /*=========================\n      Parallax\n      ===========================*/\n\n\n    function setParallaxTransform(el, progress) {\n      el = $(el);\n      var p, pX, pY;\n      var rtlFactor = s.rtl ? -1 : 1;\n      p = el.attr('data-swiper-parallax') || '0';\n      pX = el.attr('data-swiper-parallax-x');\n      pY = el.attr('data-swiper-parallax-y');\n\n      if (pX || pY) {\n        pX = pX || '0';\n        pY = pY || '0';\n      } else {\n        if (s.isHorizontal()) {\n          pX = p;\n          pY = '0';\n        } else {\n          pY = p;\n          pX = '0';\n        }\n      }\n\n      if (pX.indexOf('%') >= 0) {\n        pX = parseInt(pX, 10) * progress * rtlFactor + '%';\n      } else {\n        pX = pX * progress * rtlFactor + 'px';\n      }\n\n      if (pY.indexOf('%') >= 0) {\n        pY = parseInt(pY, 10) * progress + '%';\n      } else {\n        pY = pY * progress + 'px';\n      }\n\n      el.transform('translate3d(' + pX + ', ' + pY + ',0px)');\n    }\n\n    s.parallax = {\n      setTranslate: function () {\n        s.container.children('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function () {\n          setParallaxTransform(this, s.progress);\n        });\n        s.slides.each(function () {\n          var slide = $(this);\n          slide.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function () {\n            var progress = Math.min(Math.max(slide[0].progress, -1), 1);\n            setParallaxTransform(this, progress);\n          });\n        });\n      },\n      setTransition: function (duration) {\n        if (typeof duration === 'undefined') duration = s.params.speed;\n        s.container.find('[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]').each(function () {\n          var el = $(this);\n          var parallaxDuration = parseInt(el.attr('data-swiper-parallax-duration'), 10) || duration;\n          if (duration === 0) parallaxDuration = 0;\n          el.transition(parallaxDuration);\n        });\n      }\n    };\n    /*=========================\n      Zoom\n      ===========================*/\n\n    s.zoom = {\n      // \"Global\" Props\n      scale: 1,\n      currentScale: 1,\n      isScaling: false,\n      gesture: {\n        slide: undefined,\n        slideWidth: undefined,\n        slideHeight: undefined,\n        image: undefined,\n        imageWrap: undefined,\n        zoomMax: s.params.zoomMax\n      },\n      image: {\n        isTouched: undefined,\n        isMoved: undefined,\n        currentX: undefined,\n        currentY: undefined,\n        minX: undefined,\n        minY: undefined,\n        maxX: undefined,\n        maxY: undefined,\n        width: undefined,\n        height: undefined,\n        startX: undefined,\n        startY: undefined,\n        touchesStart: {},\n        touchesCurrent: {}\n      },\n      velocity: {\n        x: undefined,\n        y: undefined,\n        prevPositionX: undefined,\n        prevPositionY: undefined,\n        prevTime: undefined\n      },\n      // Calc Scale From Multi-touches\n      getDistanceBetweenTouches: function (e) {\n        if (e.targetTouches.length < 2) return 1;\n        var x1 = e.targetTouches[0].pageX,\n            y1 = e.targetTouches[0].pageY,\n            x2 = e.targetTouches[1].pageX,\n            y2 = e.targetTouches[1].pageY;\n        var distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n        return distance;\n      },\n      // Events\n      onGestureStart: function (e) {\n        var z = s.zoom;\n\n        if (!s.support.gestures) {\n          if (e.type !== 'touchstart' || e.type === 'touchstart' && e.targetTouches.length < 2) {\n            return;\n          }\n\n          z.gesture.scaleStart = z.getDistanceBetweenTouches(e);\n        }\n\n        if (!z.gesture.slide || !z.gesture.slide.length) {\n          z.gesture.slide = $(this);\n          if (z.gesture.slide.length === 0) z.gesture.slide = s.slides.eq(s.activeIndex);\n          z.gesture.image = z.gesture.slide.find('img, svg, canvas');\n          z.gesture.imageWrap = z.gesture.image.parent('.' + s.params.zoomContainerClass);\n          z.gesture.zoomMax = z.gesture.imageWrap.attr('data-swiper-zoom') || s.params.zoomMax;\n\n          if (z.gesture.imageWrap.length === 0) {\n            z.gesture.image = undefined;\n            return;\n          }\n        }\n\n        z.gesture.image.transition(0);\n        z.isScaling = true;\n      },\n      onGestureChange: function (e) {\n        var z = s.zoom;\n\n        if (!s.support.gestures) {\n          if (e.type !== 'touchmove' || e.type === 'touchmove' && e.targetTouches.length < 2) {\n            return;\n          }\n\n          z.gesture.scaleMove = z.getDistanceBetweenTouches(e);\n        }\n\n        if (!z.gesture.image || z.gesture.image.length === 0) return;\n\n        if (s.support.gestures) {\n          z.scale = e.scale * z.currentScale;\n        } else {\n          z.scale = z.gesture.scaleMove / z.gesture.scaleStart * z.currentScale;\n        }\n\n        if (z.scale > z.gesture.zoomMax) {\n          z.scale = z.gesture.zoomMax - 1 + Math.pow(z.scale - z.gesture.zoomMax + 1, 0.5);\n        }\n\n        if (z.scale < s.params.zoomMin) {\n          z.scale = s.params.zoomMin + 1 - Math.pow(s.params.zoomMin - z.scale + 1, 0.5);\n        }\n\n        z.gesture.image.transform('translate3d(0,0,0) scale(' + z.scale + ')');\n      },\n      onGestureEnd: function (e) {\n        var z = s.zoom;\n\n        if (!s.support.gestures) {\n          if (e.type !== 'touchend' || e.type === 'touchend' && e.changedTouches.length < 2) {\n            return;\n          }\n        }\n\n        if (!z.gesture.image || z.gesture.image.length === 0) return;\n        z.scale = Math.max(Math.min(z.scale, z.gesture.zoomMax), s.params.zoomMin);\n        z.gesture.image.transition(s.params.speed).transform('translate3d(0,0,0) scale(' + z.scale + ')');\n        z.currentScale = z.scale;\n        z.isScaling = false;\n        if (z.scale === 1) z.gesture.slide = undefined;\n      },\n      onTouchStart: function (s, e) {\n        var z = s.zoom;\n        if (!z.gesture.image || z.gesture.image.length === 0) return;\n        if (z.image.isTouched) return;\n        if (s.device.os === 'android') e.preventDefault();\n        z.image.isTouched = true;\n        z.image.touchesStart.x = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.pageX;\n        z.image.touchesStart.y = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.pageY;\n      },\n      onTouchMove: function (e) {\n        var z = s.zoom;\n        if (!z.gesture.image || z.gesture.image.length === 0) return;\n        s.allowClick = false;\n        if (!z.image.isTouched || !z.gesture.slide) return;\n\n        if (!z.image.isMoved) {\n          z.image.width = z.gesture.image[0].offsetWidth;\n          z.image.height = z.gesture.image[0].offsetHeight;\n          z.image.startX = s.getTranslate(z.gesture.imageWrap[0], 'x') || 0;\n          z.image.startY = s.getTranslate(z.gesture.imageWrap[0], 'y') || 0;\n          z.gesture.slideWidth = z.gesture.slide[0].offsetWidth;\n          z.gesture.slideHeight = z.gesture.slide[0].offsetHeight;\n          z.gesture.imageWrap.transition(0);\n          if (s.rtl) z.image.startX = -z.image.startX;\n          if (s.rtl) z.image.startY = -z.image.startY;\n        } // Define if we need image drag\n\n\n        var scaledWidth = z.image.width * z.scale;\n        var scaledHeight = z.image.height * z.scale;\n        if (scaledWidth < z.gesture.slideWidth && scaledHeight < z.gesture.slideHeight) return;\n        z.image.minX = Math.min(z.gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        z.image.maxX = -z.image.minX;\n        z.image.minY = Math.min(z.gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        z.image.maxY = -z.image.minY;\n        z.image.touchesCurrent.x = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.pageX;\n        z.image.touchesCurrent.y = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.pageY;\n\n        if (!z.image.isMoved && !z.isScaling) {\n          if (s.isHorizontal() && Math.floor(z.image.minX) === Math.floor(z.image.startX) && z.image.touchesCurrent.x < z.image.touchesStart.x || Math.floor(z.image.maxX) === Math.floor(z.image.startX) && z.image.touchesCurrent.x > z.image.touchesStart.x) {\n            z.image.isTouched = false;\n            return;\n          } else if (!s.isHorizontal() && Math.floor(z.image.minY) === Math.floor(z.image.startY) && z.image.touchesCurrent.y < z.image.touchesStart.y || Math.floor(z.image.maxY) === Math.floor(z.image.startY) && z.image.touchesCurrent.y > z.image.touchesStart.y) {\n            z.image.isTouched = false;\n            return;\n          }\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n        z.image.isMoved = true;\n        z.image.currentX = z.image.touchesCurrent.x - z.image.touchesStart.x + z.image.startX;\n        z.image.currentY = z.image.touchesCurrent.y - z.image.touchesStart.y + z.image.startY;\n\n        if (z.image.currentX < z.image.minX) {\n          z.image.currentX = z.image.minX + 1 - Math.pow(z.image.minX - z.image.currentX + 1, 0.8);\n        }\n\n        if (z.image.currentX > z.image.maxX) {\n          z.image.currentX = z.image.maxX - 1 + Math.pow(z.image.currentX - z.image.maxX + 1, 0.8);\n        }\n\n        if (z.image.currentY < z.image.minY) {\n          z.image.currentY = z.image.minY + 1 - Math.pow(z.image.minY - z.image.currentY + 1, 0.8);\n        }\n\n        if (z.image.currentY > z.image.maxY) {\n          z.image.currentY = z.image.maxY - 1 + Math.pow(z.image.currentY - z.image.maxY + 1, 0.8);\n        } //Velocity\n\n\n        if (!z.velocity.prevPositionX) z.velocity.prevPositionX = z.image.touchesCurrent.x;\n        if (!z.velocity.prevPositionY) z.velocity.prevPositionY = z.image.touchesCurrent.y;\n        if (!z.velocity.prevTime) z.velocity.prevTime = Date.now();\n        z.velocity.x = (z.image.touchesCurrent.x - z.velocity.prevPositionX) / (Date.now() - z.velocity.prevTime) / 2;\n        z.velocity.y = (z.image.touchesCurrent.y - z.velocity.prevPositionY) / (Date.now() - z.velocity.prevTime) / 2;\n        if (Math.abs(z.image.touchesCurrent.x - z.velocity.prevPositionX) < 2) z.velocity.x = 0;\n        if (Math.abs(z.image.touchesCurrent.y - z.velocity.prevPositionY) < 2) z.velocity.y = 0;\n        z.velocity.prevPositionX = z.image.touchesCurrent.x;\n        z.velocity.prevPositionY = z.image.touchesCurrent.y;\n        z.velocity.prevTime = Date.now();\n        z.gesture.imageWrap.transform('translate3d(' + z.image.currentX + 'px, ' + z.image.currentY + 'px,0)');\n      },\n      onTouchEnd: function (s, e) {\n        var z = s.zoom;\n        if (!z.gesture.image || z.gesture.image.length === 0) return;\n\n        if (!z.image.isTouched || !z.image.isMoved) {\n          z.image.isTouched = false;\n          z.image.isMoved = false;\n          return;\n        }\n\n        z.image.isTouched = false;\n        z.image.isMoved = false;\n        var momentumDurationX = 300;\n        var momentumDurationY = 300;\n        var momentumDistanceX = z.velocity.x * momentumDurationX;\n        var newPositionX = z.image.currentX + momentumDistanceX;\n        var momentumDistanceY = z.velocity.y * momentumDurationY;\n        var newPositionY = z.image.currentY + momentumDistanceY; //Fix duration\n\n        if (z.velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - z.image.currentX) / z.velocity.x);\n        if (z.velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - z.image.currentY) / z.velocity.y);\n        var momentumDuration = Math.max(momentumDurationX, momentumDurationY);\n        z.image.currentX = newPositionX;\n        z.image.currentY = newPositionY; // Define if we need image drag\n\n        var scaledWidth = z.image.width * z.scale;\n        var scaledHeight = z.image.height * z.scale;\n        z.image.minX = Math.min(z.gesture.slideWidth / 2 - scaledWidth / 2, 0);\n        z.image.maxX = -z.image.minX;\n        z.image.minY = Math.min(z.gesture.slideHeight / 2 - scaledHeight / 2, 0);\n        z.image.maxY = -z.image.minY;\n        z.image.currentX = Math.max(Math.min(z.image.currentX, z.image.maxX), z.image.minX);\n        z.image.currentY = Math.max(Math.min(z.image.currentY, z.image.maxY), z.image.minY);\n        z.gesture.imageWrap.transition(momentumDuration).transform('translate3d(' + z.image.currentX + 'px, ' + z.image.currentY + 'px,0)');\n      },\n      onTransitionEnd: function (s) {\n        var z = s.zoom;\n\n        if (z.gesture.slide && s.previousIndex !== s.activeIndex) {\n          z.gesture.image.transform('translate3d(0,0,0) scale(1)');\n          z.gesture.imageWrap.transform('translate3d(0,0,0)');\n          z.gesture.slide = z.gesture.image = z.gesture.imageWrap = undefined;\n          z.scale = z.currentScale = 1;\n        }\n      },\n      // Toggle Zoom\n      toggleZoom: function (s, e) {\n        var z = s.zoom;\n\n        if (!z.gesture.slide) {\n          z.gesture.slide = s.clickedSlide ? $(s.clickedSlide) : s.slides.eq(s.activeIndex);\n          z.gesture.image = z.gesture.slide.find('img, svg, canvas');\n          z.gesture.imageWrap = z.gesture.image.parent('.' + s.params.zoomContainerClass);\n        }\n\n        if (!z.gesture.image || z.gesture.image.length === 0) return;\n        var touchX, touchY, offsetX, offsetY, diffX, diffY, translateX, translateY, imageWidth, imageHeight, scaledWidth, scaledHeight, translateMinX, translateMinY, translateMaxX, translateMaxY, slideWidth, slideHeight;\n\n        if (typeof z.image.touchesStart.x === 'undefined' && e) {\n          touchX = e.type === 'touchend' ? e.changedTouches[0].pageX : e.pageX;\n          touchY = e.type === 'touchend' ? e.changedTouches[0].pageY : e.pageY;\n        } else {\n          touchX = z.image.touchesStart.x;\n          touchY = z.image.touchesStart.y;\n        }\n\n        if (z.scale && z.scale !== 1) {\n          // Zoom Out\n          z.scale = z.currentScale = 1;\n          z.gesture.imageWrap.transition(300).transform('translate3d(0,0,0)');\n          z.gesture.image.transition(300).transform('translate3d(0,0,0) scale(1)');\n          z.gesture.slide = undefined;\n        } else {\n          // Zoom In\n          z.scale = z.currentScale = z.gesture.imageWrap.attr('data-swiper-zoom') || s.params.zoomMax;\n\n          if (e) {\n            slideWidth = z.gesture.slide[0].offsetWidth;\n            slideHeight = z.gesture.slide[0].offsetHeight;\n            offsetX = z.gesture.slide.offset().left;\n            offsetY = z.gesture.slide.offset().top;\n            diffX = offsetX + slideWidth / 2 - touchX;\n            diffY = offsetY + slideHeight / 2 - touchY;\n            imageWidth = z.gesture.image[0].offsetWidth;\n            imageHeight = z.gesture.image[0].offsetHeight;\n            scaledWidth = imageWidth * z.scale;\n            scaledHeight = imageHeight * z.scale;\n            translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\n            translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\n            translateMaxX = -translateMinX;\n            translateMaxY = -translateMinY;\n            translateX = diffX * z.scale;\n            translateY = diffY * z.scale;\n\n            if (translateX < translateMinX) {\n              translateX = translateMinX;\n            }\n\n            if (translateX > translateMaxX) {\n              translateX = translateMaxX;\n            }\n\n            if (translateY < translateMinY) {\n              translateY = translateMinY;\n            }\n\n            if (translateY > translateMaxY) {\n              translateY = translateMaxY;\n            }\n          } else {\n            translateX = 0;\n            translateY = 0;\n          }\n\n          z.gesture.imageWrap.transition(300).transform('translate3d(' + translateX + 'px, ' + translateY + 'px,0)');\n          z.gesture.image.transition(300).transform('translate3d(0,0,0) scale(' + z.scale + ')');\n        }\n      },\n      // Attach/Detach Events\n      attachEvents: function (detach) {\n        var action = detach ? 'off' : 'on';\n\n        if (s.params.zoom) {\n          var target = s.slides;\n          var passiveListener = s.touchEvents.start === 'touchstart' && s.support.passiveListener && s.params.passiveListeners ? {\n            passive: true,\n            capture: false\n          } : false; // Scale image\n\n          if (s.support.gestures) {\n            s.slides[action]('gesturestart', s.zoom.onGestureStart, passiveListener);\n            s.slides[action]('gesturechange', s.zoom.onGestureChange, passiveListener);\n            s.slides[action]('gestureend', s.zoom.onGestureEnd, passiveListener);\n          } else if (s.touchEvents.start === 'touchstart') {\n            s.slides[action](s.touchEvents.start, s.zoom.onGestureStart, passiveListener);\n            s.slides[action](s.touchEvents.move, s.zoom.onGestureChange, passiveListener);\n            s.slides[action](s.touchEvents.end, s.zoom.onGestureEnd, passiveListener);\n          } // Move image\n\n\n          s[action]('touchStart', s.zoom.onTouchStart);\n          s.slides.each(function (index, slide) {\n            if ($(slide).find('.' + s.params.zoomContainerClass).length > 0) {\n              $(slide)[action](s.touchEvents.move, s.zoom.onTouchMove);\n            }\n          });\n          s[action]('touchEnd', s.zoom.onTouchEnd); // Scale Out\n\n          s[action]('transitionEnd', s.zoom.onTransitionEnd);\n\n          if (s.params.zoomToggle) {\n            s.on('doubleTap', s.zoom.toggleZoom);\n          }\n        }\n      },\n      init: function () {\n        s.zoom.attachEvents();\n      },\n      destroy: function () {\n        s.zoom.attachEvents(true);\n      }\n    };\n    /*=========================\n      Plugins API. Collect all and init all plugins\n      ===========================*/\n\n    s._plugins = [];\n\n    for (var plugin in s.plugins) {\n      var p = s.plugins[plugin](s, s.params[plugin]);\n      if (p) s._plugins.push(p);\n    } // Method to call all plugins event/method\n\n\n    s.callPlugins = function (eventName) {\n      for (var i = 0; i < s._plugins.length; i++) {\n        if (eventName in s._plugins[i]) {\n          s._plugins[i][eventName](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n        }\n      }\n    };\n    /*=========================\n      Events/Callbacks/Plugins Emitter\n      ===========================*/\n\n\n    function normalizeEventName(eventName) {\n      if (eventName.indexOf('on') !== 0) {\n        if (eventName[0] !== eventName[0].toUpperCase()) {\n          eventName = 'on' + eventName[0].toUpperCase() + eventName.substring(1);\n        } else {\n          eventName = 'on' + eventName;\n        }\n      }\n\n      return eventName;\n    }\n\n    s.emitterEventListeners = {};\n\n    s.emit = function (eventName) {\n      // Trigger callbacks\n      if (s.params[eventName]) {\n        s.params[eventName](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n      }\n\n      var i; // Trigger events\n\n      if (s.emitterEventListeners[eventName]) {\n        for (i = 0; i < s.emitterEventListeners[eventName].length; i++) {\n          s.emitterEventListeners[eventName][i](arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n        }\n      } // Trigger plugins\n\n\n      if (s.callPlugins) s.callPlugins(eventName, arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n    };\n\n    s.on = function (eventName, handler) {\n      eventName = normalizeEventName(eventName);\n      if (!s.emitterEventListeners[eventName]) s.emitterEventListeners[eventName] = [];\n      s.emitterEventListeners[eventName].push(handler);\n      return s;\n    };\n\n    s.off = function (eventName, handler) {\n      var i;\n      eventName = normalizeEventName(eventName);\n\n      if (typeof handler === 'undefined') {\n        // Remove all handlers for such event\n        s.emitterEventListeners[eventName] = [];\n        return s;\n      }\n\n      if (!s.emitterEventListeners[eventName] || s.emitterEventListeners[eventName].length === 0) return;\n\n      for (i = 0; i < s.emitterEventListeners[eventName].length; i++) {\n        if (s.emitterEventListeners[eventName][i] === handler) s.emitterEventListeners[eventName].splice(i, 1);\n      }\n\n      return s;\n    };\n\n    s.once = function (eventName, handler) {\n      eventName = normalizeEventName(eventName);\n\n      var _handler = function () {\n        handler(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);\n        s.off(eventName, _handler);\n      };\n\n      s.on(eventName, _handler);\n      return s;\n    }; // Accessibility tools\n\n\n    s.a11y = {\n      makeFocusable: function ($el) {\n        $el.attr('tabIndex', '0');\n        return $el;\n      },\n      addRole: function ($el, role) {\n        $el.attr('role', role);\n        return $el;\n      },\n      addLabel: function ($el, label) {\n        $el.attr('aria-label', label);\n        return $el;\n      },\n      disable: function ($el) {\n        $el.attr('aria-disabled', true);\n        return $el;\n      },\n      enable: function ($el) {\n        $el.attr('aria-disabled', false);\n        return $el;\n      },\n      onEnterKey: function (event) {\n        if (event.keyCode !== 13) return;\n\n        if ($(event.target).is(s.params.nextButton)) {\n          s.onClickNext(event);\n\n          if (s.isEnd) {\n            s.a11y.notify(s.params.lastSlideMessage);\n          } else {\n            s.a11y.notify(s.params.nextSlideMessage);\n          }\n        } else if ($(event.target).is(s.params.prevButton)) {\n          s.onClickPrev(event);\n\n          if (s.isBeginning) {\n            s.a11y.notify(s.params.firstSlideMessage);\n          } else {\n            s.a11y.notify(s.params.prevSlideMessage);\n          }\n        }\n\n        if ($(event.target).is('.' + s.params.bulletClass)) {\n          $(event.target)[0].click();\n        }\n      },\n      liveRegion: $('<span class=\"' + s.params.notificationClass + '\" aria-live=\"assertive\" aria-atomic=\"true\"></span>'),\n      notify: function (message) {\n        var notification = s.a11y.liveRegion;\n        if (notification.length === 0) return;\n        notification.html('');\n        notification.html(message);\n      },\n      init: function () {\n        // Setup accessibility\n        if (s.params.nextButton && s.nextButton && s.nextButton.length > 0) {\n          s.a11y.makeFocusable(s.nextButton);\n          s.a11y.addRole(s.nextButton, 'button');\n          s.a11y.addLabel(s.nextButton, s.params.nextSlideMessage);\n        }\n\n        if (s.params.prevButton && s.prevButton && s.prevButton.length > 0) {\n          s.a11y.makeFocusable(s.prevButton);\n          s.a11y.addRole(s.prevButton, 'button');\n          s.a11y.addLabel(s.prevButton, s.params.prevSlideMessage);\n        }\n\n        $(s.container).append(s.a11y.liveRegion);\n      },\n      initPagination: function () {\n        if (s.params.pagination && s.params.paginationClickable && s.bullets && s.bullets.length) {\n          s.bullets.each(function () {\n            var bullet = $(this);\n            s.a11y.makeFocusable(bullet);\n            s.a11y.addRole(bullet, 'button');\n            s.a11y.addLabel(bullet, s.params.paginationBulletMessage.replace(/{{index}}/, bullet.index() + 1));\n          });\n        }\n      },\n      destroy: function () {\n        if (s.a11y.liveRegion && s.a11y.liveRegion.length > 0) s.a11y.liveRegion.remove();\n      }\n    };\n    /*=========================\n      Init/Destroy\n      ===========================*/\n\n    s.init = function () {\n      if (s.params.loop) s.createLoop();\n      s.updateContainerSize();\n      s.updateSlidesSize();\n      s.updatePagination();\n\n      if (s.params.scrollbar && s.scrollbar) {\n        s.scrollbar.set();\n\n        if (s.params.scrollbarDraggable) {\n          s.scrollbar.enableDraggable();\n        }\n      }\n\n      if (s.params.effect !== 'slide' && s.effects[s.params.effect]) {\n        if (!s.params.loop) s.updateProgress();\n        s.effects[s.params.effect].setTranslate();\n      }\n\n      if (s.params.loop) {\n        s.slideTo(s.params.initialSlide + s.loopedSlides, 0, s.params.runCallbacksOnInit);\n      } else {\n        s.slideTo(s.params.initialSlide, 0, s.params.runCallbacksOnInit);\n\n        if (s.params.initialSlide === 0) {\n          if (s.parallax && s.params.parallax) s.parallax.setTranslate();\n\n          if (s.lazy && s.params.lazyLoading) {\n            s.lazy.load();\n            s.lazy.initialImageLoaded = true;\n          }\n        }\n      }\n\n      s.attachEvents();\n\n      if (s.params.observer && s.support.observer) {\n        s.initObservers();\n      }\n\n      if (s.params.preloadImages && !s.params.lazyLoading) {\n        s.preloadImages();\n      }\n\n      if (s.params.zoom && s.zoom) {\n        s.zoom.init();\n      }\n\n      if (s.params.autoplay) {\n        s.startAutoplay();\n      }\n\n      if (s.params.keyboardControl) {\n        if (s.enableKeyboardControl) s.enableKeyboardControl();\n      }\n\n      if (s.params.mousewheelControl) {\n        if (s.enableMousewheelControl) s.enableMousewheelControl();\n      } // Deprecated hashnavReplaceState changed to replaceState for use in hashnav and history\n\n\n      if (s.params.hashnavReplaceState) {\n        s.params.replaceState = s.params.hashnavReplaceState;\n      }\n\n      if (s.params.history) {\n        if (s.history) s.history.init();\n      }\n\n      if (s.params.hashnav) {\n        if (s.hashnav) s.hashnav.init();\n      }\n\n      if (s.params.a11y && s.a11y) s.a11y.init();\n      s.emit('onInit', s);\n    }; // Cleanup dynamic styles\n\n\n    s.cleanupStyles = function () {\n      // Container\n      s.container.removeClass(s.classNames.join(' ')).removeAttr('style'); // Wrapper\n\n      s.wrapper.removeAttr('style'); // Slides\n\n      if (s.slides && s.slides.length) {\n        s.slides.removeClass([s.params.slideVisibleClass, s.params.slideActiveClass, s.params.slideNextClass, s.params.slidePrevClass].join(' ')).removeAttr('style').removeAttr('data-swiper-column').removeAttr('data-swiper-row');\n      } // Pagination/Bullets\n\n\n      if (s.paginationContainer && s.paginationContainer.length) {\n        s.paginationContainer.removeClass(s.params.paginationHiddenClass);\n      }\n\n      if (s.bullets && s.bullets.length) {\n        s.bullets.removeClass(s.params.bulletActiveClass);\n      } // Buttons\n\n\n      if (s.params.prevButton) $(s.params.prevButton).removeClass(s.params.buttonDisabledClass);\n      if (s.params.nextButton) $(s.params.nextButton).removeClass(s.params.buttonDisabledClass); // Scrollbar\n\n      if (s.params.scrollbar && s.scrollbar) {\n        if (s.scrollbar.track && s.scrollbar.track.length) s.scrollbar.track.removeAttr('style');\n        if (s.scrollbar.drag && s.scrollbar.drag.length) s.scrollbar.drag.removeAttr('style');\n      }\n    }; // Destroy\n\n\n    s.destroy = function (deleteInstance, cleanupStyles) {\n      // Detach evebts\n      s.detachEvents(); // Stop autoplay\n\n      s.stopAutoplay(); // Disable draggable\n\n      if (s.params.scrollbar && s.scrollbar) {\n        if (s.params.scrollbarDraggable) {\n          s.scrollbar.disableDraggable();\n        }\n      } // Destroy loop\n\n\n      if (s.params.loop) {\n        s.destroyLoop();\n      } // Cleanup styles\n\n\n      if (cleanupStyles) {\n        s.cleanupStyles();\n      } // Disconnect observer\n\n\n      s.disconnectObservers(); // Destroy zoom\n\n      if (s.params.zoom && s.zoom) {\n        s.zoom.destroy();\n      } // Disable keyboard/mousewheel\n\n\n      if (s.params.keyboardControl) {\n        if (s.disableKeyboardControl) s.disableKeyboardControl();\n      }\n\n      if (s.params.mousewheelControl) {\n        if (s.disableMousewheelControl) s.disableMousewheelControl();\n      } // Disable a11y\n\n\n      if (s.params.a11y && s.a11y) s.a11y.destroy(); // Delete history popstate\n\n      if (s.params.history && !s.params.replaceState) {\n        window.removeEventListener('popstate', s.history.setHistoryPopState);\n      }\n\n      if (s.params.hashnav && s.hashnav) {\n        s.hashnav.destroy();\n      } // Destroy callback\n\n\n      s.emit('onDestroy'); // Delete instance\n\n      if (deleteInstance !== false) s = null;\n    };\n\n    s.init(); // Return swiper instance\n\n    return s;\n  };\n  /*==================================================\n      Prototype\n  ====================================================*/\n\n\n  Swiper.prototype = {\n    isSafari: function () {\n      var ua = window.navigator.userAgent.toLowerCase();\n      return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\n    }(),\n    isUiWebView: /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent),\n    isArray: function (arr) {\n      return Object.prototype.toString.apply(arr) === '[object Array]';\n    },\n\n    /*==================================================\n    Browser\n    ====================================================*/\n    browser: {\n      ie: window.navigator.pointerEnabled || window.navigator.msPointerEnabled,\n      ieTouch: window.navigator.msPointerEnabled && window.navigator.msMaxTouchPoints > 1 || window.navigator.pointerEnabled && window.navigator.maxTouchPoints > 1,\n      lteIE9: function () {\n        // create temporary DIV\n        var div = document.createElement('div'); // add content to tmp DIV which is wrapped into the IE HTML conditional statement\n\n        div.innerHTML = '<!--[if lte IE 9]><i></i><![endif]-->'; // return true / false value based on what will browser render\n\n        return div.getElementsByTagName('i').length === 1;\n      }()\n    },\n\n    /*==================================================\n    Devices\n    ====================================================*/\n    device: function () {\n      var ua = window.navigator.userAgent;\n      var android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/);\n      var ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\n      var ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\n      var iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\n      return {\n        ios: ipad || iphone || ipod,\n        android: android\n      };\n    }(),\n\n    /*==================================================\n    Feature Detection\n    ====================================================*/\n    support: {\n      touch: window.Modernizr && Modernizr.touch === true || function () {\n        return !!('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch);\n      }(),\n      transforms3d: window.Modernizr && Modernizr.csstransforms3d === true || function () {\n        var div = document.createElement('div').style;\n        return 'webkitPerspective' in div || 'MozPerspective' in div || 'OPerspective' in div || 'MsPerspective' in div || 'perspective' in div;\n      }(),\n      flexbox: function () {\n        var div = document.createElement('div').style;\n        var styles = 'alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient'.split(' ');\n\n        for (var i = 0; i < styles.length; i++) {\n          if (styles[i] in div) return true;\n        }\n      }(),\n      observer: function () {\n        return 'MutationObserver' in window || 'WebkitMutationObserver' in window;\n      }(),\n      passiveListener: function () {\n        var supportsPassive = false;\n\n        try {\n          var opts = Object.defineProperty({}, 'passive', {\n            get: function () {\n              supportsPassive = true;\n            }\n          });\n          window.addEventListener('testPassiveListener', null, opts);\n        } catch (e) {}\n\n        return supportsPassive;\n      }(),\n      gestures: function () {\n        return 'ongesturestart' in window;\n      }()\n    },\n\n    /*==================================================\n    Plugins\n    ====================================================*/\n    plugins: {}\n  };\n  /*===========================\n  Dom7 Library\n  ===========================*/\n\n  var Dom7 = function () {\n    var Dom7 = function (arr) {\n      var _this = this,\n          i = 0; // Create array-like object\n\n\n      for (i = 0; i < arr.length; i++) {\n        _this[i] = arr[i];\n      }\n\n      _this.length = arr.length; // Return collection with methods\n\n      return this;\n    };\n\n    var $ = function (selector, context) {\n      var arr = [],\n          i = 0;\n\n      if (selector && !context) {\n        if (selector instanceof Dom7) {\n          return selector;\n        }\n      }\n\n      if (selector) {\n        // String\n        if (typeof selector === 'string') {\n          var els,\n              tempParent,\n              html = selector.trim();\n\n          if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {\n            var toCreate = 'div';\n            if (html.indexOf('<li') === 0) toCreate = 'ul';\n            if (html.indexOf('<tr') === 0) toCreate = 'tbody';\n            if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) toCreate = 'tr';\n            if (html.indexOf('<tbody') === 0) toCreate = 'table';\n            if (html.indexOf('<option') === 0) toCreate = 'select';\n            tempParent = document.createElement(toCreate);\n            tempParent.innerHTML = selector;\n\n            for (i = 0; i < tempParent.childNodes.length; i++) {\n              arr.push(tempParent.childNodes[i]);\n            }\n          } else {\n            if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {\n              // Pure ID selector\n              els = [document.getElementById(selector.split('#')[1])];\n            } else {\n              // Other selectors\n              els = (context || document).querySelectorAll(selector);\n            }\n\n            for (i = 0; i < els.length; i++) {\n              if (els[i]) arr.push(els[i]);\n            }\n          }\n        } // Node/element\n        else if (selector.nodeType || selector === window || selector === document) {\n            arr.push(selector);\n          } //Array of elements or instance of Dom\n          else if (selector.length > 0 && selector[0].nodeType) {\n              for (i = 0; i < selector.length; i++) {\n                arr.push(selector[i]);\n              }\n            }\n      }\n\n      return new Dom7(arr);\n    };\n\n    Dom7.prototype = {\n      // Classes and attriutes\n      addClass: function (className) {\n        if (typeof className === 'undefined') {\n          return this;\n        }\n\n        var classes = className.split(' ');\n\n        for (var i = 0; i < classes.length; i++) {\n          for (var j = 0; j < this.length; j++) {\n            this[j].classList.add(classes[i]);\n          }\n        }\n\n        return this;\n      },\n      removeClass: function (className) {\n        var classes = className.split(' ');\n\n        for (var i = 0; i < classes.length; i++) {\n          for (var j = 0; j < this.length; j++) {\n            this[j].classList.remove(classes[i]);\n          }\n        }\n\n        return this;\n      },\n      hasClass: function (className) {\n        if (!this[0]) return false;else return this[0].classList.contains(className);\n      },\n      toggleClass: function (className) {\n        var classes = className.split(' ');\n\n        for (var i = 0; i < classes.length; i++) {\n          for (var j = 0; j < this.length; j++) {\n            this[j].classList.toggle(classes[i]);\n          }\n        }\n\n        return this;\n      },\n      attr: function (attrs, value) {\n        if (arguments.length === 1 && typeof attrs === 'string') {\n          // Get attr\n          if (this[0]) return this[0].getAttribute(attrs);else return undefined;\n        } else {\n          // Set attrs\n          for (var i = 0; i < this.length; i++) {\n            if (arguments.length === 2) {\n              // String\n              this[i].setAttribute(attrs, value);\n            } else {\n              // Object\n              for (var attrName in attrs) {\n                this[i][attrName] = attrs[attrName];\n                this[i].setAttribute(attrName, attrs[attrName]);\n              }\n            }\n          }\n\n          return this;\n        }\n      },\n      removeAttr: function (attr) {\n        for (var i = 0; i < this.length; i++) {\n          this[i].removeAttribute(attr);\n        }\n\n        return this;\n      },\n      data: function (key, value) {\n        if (typeof value === 'undefined') {\n          // Get value\n          if (this[0]) {\n            var dataKey = this[0].getAttribute('data-' + key);\n            if (dataKey) return dataKey;else if (this[0].dom7ElementDataStorage && key in this[0].dom7ElementDataStorage) return this[0].dom7ElementDataStorage[key];else return undefined;\n          } else return undefined;\n        } else {\n          // Set value\n          for (var i = 0; i < this.length; i++) {\n            var el = this[i];\n            if (!el.dom7ElementDataStorage) el.dom7ElementDataStorage = {};\n            el.dom7ElementDataStorage[key] = value;\n          }\n\n          return this;\n        }\n      },\n      // Transforms\n      transform: function (transform) {\n        for (var i = 0; i < this.length; i++) {\n          var elStyle = this[i].style;\n          elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = transform;\n        }\n\n        return this;\n      },\n      transition: function (duration) {\n        if (typeof duration !== 'string') {\n          duration = duration + 'ms';\n        }\n\n        for (var i = 0; i < this.length; i++) {\n          var elStyle = this[i].style;\n          elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;\n        }\n\n        return this;\n      },\n      //Events\n      on: function (eventName, targetSelector, listener, capture) {\n        function handleLiveEvent(e) {\n          var target = e.target;\n          if ($(target).is(targetSelector)) listener.call(target, e);else {\n            var parents = $(target).parents();\n\n            for (var k = 0; k < parents.length; k++) {\n              if ($(parents[k]).is(targetSelector)) listener.call(parents[k], e);\n            }\n          }\n        }\n\n        var events = eventName.split(' ');\n        var i, j;\n\n        for (i = 0; i < this.length; i++) {\n          if (typeof targetSelector === 'function' || targetSelector === false) {\n            // Usual events\n            if (typeof targetSelector === 'function') {\n              listener = arguments[1];\n              capture = arguments[2] || false;\n            }\n\n            for (j = 0; j < events.length; j++) {\n              this[i].addEventListener(events[j], listener, capture);\n            }\n          } else {\n            //Live events\n            for (j = 0; j < events.length; j++) {\n              if (!this[i].dom7LiveListeners) this[i].dom7LiveListeners = [];\n              this[i].dom7LiveListeners.push({\n                listener: listener,\n                liveListener: handleLiveEvent\n              });\n              this[i].addEventListener(events[j], handleLiveEvent, capture);\n            }\n          }\n        }\n\n        return this;\n      },\n      off: function (eventName, targetSelector, listener, capture) {\n        var events = eventName.split(' ');\n\n        for (var i = 0; i < events.length; i++) {\n          for (var j = 0; j < this.length; j++) {\n            if (typeof targetSelector === 'function' || targetSelector === false) {\n              // Usual events\n              if (typeof targetSelector === 'function') {\n                listener = arguments[1];\n                capture = arguments[2] || false;\n              }\n\n              this[j].removeEventListener(events[i], listener, capture);\n            } else {\n              // Live event\n              if (this[j].dom7LiveListeners) {\n                for (var k = 0; k < this[j].dom7LiveListeners.length; k++) {\n                  if (this[j].dom7LiveListeners[k].listener === listener) {\n                    this[j].removeEventListener(events[i], this[j].dom7LiveListeners[k].liveListener, capture);\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        return this;\n      },\n      once: function (eventName, targetSelector, listener, capture) {\n        var dom = this;\n\n        if (typeof targetSelector === 'function') {\n          targetSelector = false;\n          listener = arguments[1];\n          capture = arguments[2];\n        }\n\n        function proxy(e) {\n          listener(e);\n          dom.off(eventName, targetSelector, proxy, capture);\n        }\n\n        dom.on(eventName, targetSelector, proxy, capture);\n      },\n      trigger: function (eventName, eventData) {\n        for (var i = 0; i < this.length; i++) {\n          var evt;\n\n          try {\n            evt = new window.CustomEvent(eventName, {\n              detail: eventData,\n              bubbles: true,\n              cancelable: true\n            });\n          } catch (e) {\n            evt = document.createEvent('Event');\n            evt.initEvent(eventName, true, true);\n            evt.detail = eventData;\n          }\n\n          this[i].dispatchEvent(evt);\n        }\n\n        return this;\n      },\n      transitionEnd: function (callback) {\n        var events = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'],\n            i,\n            j,\n            dom = this;\n\n        function fireCallBack(e) {\n          /*jshint validthis:true */\n          if (e.target !== this) return;\n          callback.call(this, e);\n\n          for (i = 0; i < events.length; i++) {\n            dom.off(events[i], fireCallBack);\n          }\n        }\n\n        if (callback) {\n          for (i = 0; i < events.length; i++) {\n            dom.on(events[i], fireCallBack);\n          }\n        }\n\n        return this;\n      },\n      // Sizing/Styles\n      width: function () {\n        if (this[0] === window) {\n          return window.innerWidth;\n        } else {\n          if (this.length > 0) {\n            return parseFloat(this.css('width'));\n          } else {\n            return null;\n          }\n        }\n      },\n      outerWidth: function (includeMargins) {\n        if (this.length > 0) {\n          if (includeMargins) return this[0].offsetWidth + parseFloat(this.css('margin-right')) + parseFloat(this.css('margin-left'));else return this[0].offsetWidth;\n        } else return null;\n      },\n      height: function () {\n        if (this[0] === window) {\n          return window.innerHeight;\n        } else {\n          if (this.length > 0) {\n            return parseFloat(this.css('height'));\n          } else {\n            return null;\n          }\n        }\n      },\n      outerHeight: function (includeMargins) {\n        if (this.length > 0) {\n          if (includeMargins) return this[0].offsetHeight + parseFloat(this.css('margin-top')) + parseFloat(this.css('margin-bottom'));else return this[0].offsetHeight;\n        } else return null;\n      },\n      offset: function () {\n        if (this.length > 0) {\n          var el = this[0];\n          var box = el.getBoundingClientRect();\n          var body = document.body;\n          var clientTop = el.clientTop || body.clientTop || 0;\n          var clientLeft = el.clientLeft || body.clientLeft || 0;\n          var scrollTop = window.pageYOffset || el.scrollTop;\n          var scrollLeft = window.pageXOffset || el.scrollLeft;\n          return {\n            top: box.top + scrollTop - clientTop,\n            left: box.left + scrollLeft - clientLeft\n          };\n        } else {\n          return null;\n        }\n      },\n      css: function (props, value) {\n        var i;\n\n        if (arguments.length === 1) {\n          if (typeof props === 'string') {\n            if (this[0]) return window.getComputedStyle(this[0], null).getPropertyValue(props);\n          } else {\n            for (i = 0; i < this.length; i++) {\n              for (var prop in props) {\n                this[i].style[prop] = props[prop];\n              }\n            }\n\n            return this;\n          }\n        }\n\n        if (arguments.length === 2 && typeof props === 'string') {\n          for (i = 0; i < this.length; i++) {\n            this[i].style[props] = value;\n          }\n\n          return this;\n        }\n\n        return this;\n      },\n      //Dom manipulation\n      each: function (callback) {\n        for (var i = 0; i < this.length; i++) {\n          callback.call(this[i], i, this[i]);\n        }\n\n        return this;\n      },\n      html: function (html) {\n        if (typeof html === 'undefined') {\n          return this[0] ? this[0].innerHTML : undefined;\n        } else {\n          for (var i = 0; i < this.length; i++) {\n            this[i].innerHTML = html;\n          }\n\n          return this;\n        }\n      },\n      text: function (text) {\n        if (typeof text === 'undefined') {\n          if (this[0]) {\n            return this[0].textContent.trim();\n          } else return null;\n        } else {\n          for (var i = 0; i < this.length; i++) {\n            this[i].textContent = text;\n          }\n\n          return this;\n        }\n      },\n      is: function (selector) {\n        if (!this[0]) return false;\n        var compareWith, i;\n\n        if (typeof selector === 'string') {\n          var el = this[0];\n          if (el === document) return selector === document;\n          if (el === window) return selector === window;\n          if (el.matches) return el.matches(selector);else if (el.webkitMatchesSelector) return el.webkitMatchesSelector(selector);else if (el.mozMatchesSelector) return el.mozMatchesSelector(selector);else if (el.msMatchesSelector) return el.msMatchesSelector(selector);else {\n            compareWith = $(selector);\n\n            for (i = 0; i < compareWith.length; i++) {\n              if (compareWith[i] === this[0]) return true;\n            }\n\n            return false;\n          }\n        } else if (selector === document) return this[0] === document;else if (selector === window) return this[0] === window;else {\n          if (selector.nodeType || selector instanceof Dom7) {\n            compareWith = selector.nodeType ? [selector] : selector;\n\n            for (i = 0; i < compareWith.length; i++) {\n              if (compareWith[i] === this[0]) return true;\n            }\n\n            return false;\n          }\n\n          return false;\n        }\n      },\n      index: function () {\n        if (this[0]) {\n          var child = this[0];\n          var i = 0;\n\n          while ((child = child.previousSibling) !== null) {\n            if (child.nodeType === 1) i++;\n          }\n\n          return i;\n        } else return undefined;\n      },\n      eq: function (index) {\n        if (typeof index === 'undefined') return this;\n        var length = this.length;\n        var returnIndex;\n\n        if (index > length - 1) {\n          return new Dom7([]);\n        }\n\n        if (index < 0) {\n          returnIndex = length + index;\n          if (returnIndex < 0) return new Dom7([]);else return new Dom7([this[returnIndex]]);\n        }\n\n        return new Dom7([this[index]]);\n      },\n      append: function (newChild) {\n        var i, j;\n\n        for (i = 0; i < this.length; i++) {\n          if (typeof newChild === 'string') {\n            var tempDiv = document.createElement('div');\n            tempDiv.innerHTML = newChild;\n\n            while (tempDiv.firstChild) {\n              this[i].appendChild(tempDiv.firstChild);\n            }\n          } else if (newChild instanceof Dom7) {\n            for (j = 0; j < newChild.length; j++) {\n              this[i].appendChild(newChild[j]);\n            }\n          } else {\n            this[i].appendChild(newChild);\n          }\n        }\n\n        return this;\n      },\n      prepend: function (newChild) {\n        var i, j;\n\n        for (i = 0; i < this.length; i++) {\n          if (typeof newChild === 'string') {\n            var tempDiv = document.createElement('div');\n            tempDiv.innerHTML = newChild;\n\n            for (j = tempDiv.childNodes.length - 1; j >= 0; j--) {\n              this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);\n            } // this[i].insertAdjacentHTML('afterbegin', newChild);\n\n          } else if (newChild instanceof Dom7) {\n            for (j = 0; j < newChild.length; j++) {\n              this[i].insertBefore(newChild[j], this[i].childNodes[0]);\n            }\n          } else {\n            this[i].insertBefore(newChild, this[i].childNodes[0]);\n          }\n        }\n\n        return this;\n      },\n      insertBefore: function (selector) {\n        var before = $(selector);\n\n        for (var i = 0; i < this.length; i++) {\n          if (before.length === 1) {\n            before[0].parentNode.insertBefore(this[i], before[0]);\n          } else if (before.length > 1) {\n            for (var j = 0; j < before.length; j++) {\n              before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);\n            }\n          }\n        }\n      },\n      insertAfter: function (selector) {\n        var after = $(selector);\n\n        for (var i = 0; i < this.length; i++) {\n          if (after.length === 1) {\n            after[0].parentNode.insertBefore(this[i], after[0].nextSibling);\n          } else if (after.length > 1) {\n            for (var j = 0; j < after.length; j++) {\n              after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);\n            }\n          }\n        }\n      },\n      next: function (selector) {\n        if (this.length > 0) {\n          if (selector) {\n            if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);\n          } else {\n            if (this[0].nextElementSibling) return new Dom7([this[0].nextElementSibling]);else return new Dom7([]);\n          }\n        } else return new Dom7([]);\n      },\n      nextAll: function (selector) {\n        var nextEls = [];\n        var el = this[0];\n        if (!el) return new Dom7([]);\n\n        while (el.nextElementSibling) {\n          var next = el.nextElementSibling;\n\n          if (selector) {\n            if ($(next).is(selector)) nextEls.push(next);\n          } else nextEls.push(next);\n\n          el = next;\n        }\n\n        return new Dom7(nextEls);\n      },\n      prev: function (selector) {\n        if (this.length > 0) {\n          if (selector) {\n            if (this[0].previousElementSibling && $(this[0].previousElementSibling).is(selector)) return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);\n          } else {\n            if (this[0].previousElementSibling) return new Dom7([this[0].previousElementSibling]);else return new Dom7([]);\n          }\n        } else return new Dom7([]);\n      },\n      prevAll: function (selector) {\n        var prevEls = [];\n        var el = this[0];\n        if (!el) return new Dom7([]);\n\n        while (el.previousElementSibling) {\n          var prev = el.previousElementSibling;\n\n          if (selector) {\n            if ($(prev).is(selector)) prevEls.push(prev);\n          } else prevEls.push(prev);\n\n          el = prev;\n        }\n\n        return new Dom7(prevEls);\n      },\n      parent: function (selector) {\n        var parents = [];\n\n        for (var i = 0; i < this.length; i++) {\n          if (selector) {\n            if ($(this[i].parentNode).is(selector)) parents.push(this[i].parentNode);\n          } else {\n            parents.push(this[i].parentNode);\n          }\n        }\n\n        return $($.unique(parents));\n      },\n      parents: function (selector) {\n        var parents = [];\n\n        for (var i = 0; i < this.length; i++) {\n          var parent = this[i].parentNode;\n\n          while (parent) {\n            if (selector) {\n              if ($(parent).is(selector)) parents.push(parent);\n            } else {\n              parents.push(parent);\n            }\n\n            parent = parent.parentNode;\n          }\n        }\n\n        return $($.unique(parents));\n      },\n      find: function (selector) {\n        var foundElements = [];\n\n        for (var i = 0; i < this.length; i++) {\n          var found = this[i].querySelectorAll(selector);\n\n          for (var j = 0; j < found.length; j++) {\n            foundElements.push(found[j]);\n          }\n        }\n\n        return new Dom7(foundElements);\n      },\n      children: function (selector) {\n        var children = [];\n\n        for (var i = 0; i < this.length; i++) {\n          var childNodes = this[i].childNodes;\n\n          for (var j = 0; j < childNodes.length; j++) {\n            if (!selector) {\n              if (childNodes[j].nodeType === 1) children.push(childNodes[j]);\n            } else {\n              if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) children.push(childNodes[j]);\n            }\n          }\n        }\n\n        return new Dom7($.unique(children));\n      },\n      remove: function () {\n        for (var i = 0; i < this.length; i++) {\n          if (this[i].parentNode) this[i].parentNode.removeChild(this[i]);\n        }\n\n        return this;\n      },\n      add: function () {\n        var dom = this;\n        var i, j;\n\n        for (i = 0; i < arguments.length; i++) {\n          var toAdd = $(arguments[i]);\n\n          for (j = 0; j < toAdd.length; j++) {\n            dom[dom.length] = toAdd[j];\n            dom.length++;\n          }\n        }\n\n        return dom;\n      }\n    };\n    $.fn = Dom7.prototype;\n\n    $.unique = function (arr) {\n      var unique = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        if (unique.indexOf(arr[i]) === -1) unique.push(arr[i]);\n      }\n\n      return unique;\n    };\n\n    return $;\n  }();\n  /*===========================\n   Get Dom libraries\n   ===========================*/\n\n\n  var swiperDomPlugins = ['jQuery', 'Zepto', 'Dom7'];\n\n  for (var i = 0; i < swiperDomPlugins.length; i++) {\n    if (window[swiperDomPlugins[i]]) {\n      addLibraryPlugin(window[swiperDomPlugins[i]]);\n    }\n  } // Required DOM Plugins\n\n\n  var domLib;\n\n  if (typeof Dom7 === 'undefined') {\n    domLib = window.Dom7 || window.Zepto || window.jQuery;\n  } else {\n    domLib = Dom7;\n  }\n  /*===========================\n  Add .swiper plugin from Dom libraries\n  ===========================*/\n\n\n  function addLibraryPlugin(lib) {\n    lib.fn.swiper = function (params) {\n      var firstInstance;\n      lib(this).each(function () {\n        var s = new Swiper(this, params);\n        if (!firstInstance) firstInstance = s;\n      });\n      return firstInstance;\n    };\n  }\n\n  if (domLib) {\n    if (!('transitionEnd' in domLib.fn)) {\n      domLib.fn.transitionEnd = function (callback) {\n        var events = ['webkitTransitionEnd', 'transitionend', 'oTransitionEnd', 'MSTransitionEnd', 'msTransitionEnd'],\n            i,\n            j,\n            dom = this;\n\n        function fireCallBack(e) {\n          /*jshint validthis:true */\n          if (e.target !== this) return;\n          callback.call(this, e);\n\n          for (i = 0; i < events.length; i++) {\n            dom.off(events[i], fireCallBack);\n          }\n        }\n\n        if (callback) {\n          for (i = 0; i < events.length; i++) {\n            dom.on(events[i], fireCallBack);\n          }\n        }\n\n        return this;\n      };\n    }\n\n    if (!('transform' in domLib.fn)) {\n      domLib.fn.transform = function (transform) {\n        for (var i = 0; i < this.length; i++) {\n          var elStyle = this[i].style;\n          elStyle.webkitTransform = elStyle.MsTransform = elStyle.msTransform = elStyle.MozTransform = elStyle.OTransform = elStyle.transform = transform;\n        }\n\n        return this;\n      };\n    }\n\n    if (!('transition' in domLib.fn)) {\n      domLib.fn.transition = function (duration) {\n        if (typeof duration !== 'string') {\n          duration = duration + 'ms';\n        }\n\n        for (var i = 0; i < this.length; i++) {\n          var elStyle = this[i].style;\n          elStyle.webkitTransitionDuration = elStyle.MsTransitionDuration = elStyle.msTransitionDuration = elStyle.MozTransitionDuration = elStyle.OTransitionDuration = elStyle.transitionDuration = duration;\n        }\n\n        return this;\n      };\n    }\n\n    if (!('outerWidth' in domLib.fn)) {\n      domLib.fn.outerWidth = function (includeMargins) {\n        if (this.length > 0) {\n          if (includeMargins) return this[0].offsetWidth + parseFloat(this.css('margin-right')) + parseFloat(this.css('margin-left'));else return this[0].offsetWidth;\n        } else return null;\n      };\n    }\n  }\n\n  window.Swiper = Swiper;\n})();\n/*===========================\nSwiper AMD Export\n===========================*/\n\n\nif (typeof module !== 'undefined') {\n  module.exports = window.Swiper;\n} else if (typeof define === 'function' && define.amd) {\n  define([], function () {\n    'use strict';\n\n    return window.Swiper;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}